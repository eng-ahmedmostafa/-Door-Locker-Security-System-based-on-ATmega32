
HUM_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000323c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b0  00800060  0000323c  000032d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800110  00800110  00003380  2**0
                  ALLOC
  3 .stab         00002de4  00000000  00000000  00003380  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011c6  00000000  00000000  00006164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000732a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000746a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000075da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009223  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a10e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b01c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b2a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ba77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 31       	cpi	r26, 0x10	; 16
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e1       	ldi	r26, 0x10	; 16
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 32       	cpi	r26, 0x21	; 33
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a0 18 	jmp	0x3140	; 0x3140 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad ef       	ldi	r26, 0xFD	; 253
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bc 18 	jmp	0x3178	; 0x3178 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c8 18 	jmp	0x3190	; 0x3190 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c8 18 	jmp	0x3190	; 0x3190 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a0 18 	jmp	0x3140	; 0x3140 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d ef       	ldi	r24, 0xFD	; 253
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bc 18 	jmp	0x3178	; 0x3178 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c8 18 	jmp	0x3190	; 0x3190 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c8 18 	jmp	0x3190	; 0x3190 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c8 18 	jmp	0x3190	; 0x3190 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b0 18 	jmp	0x3160	; 0x3160 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void send_to_uart(uint8 data);
void resevePass(void);
void sendPass(void);
void cullBackTimer_1(void);
int main()
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	cd 55       	subi	r28, 0x5D	; 93
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	SREG = (1<<7);
     b60:	ef e5       	ldi	r30, 0x5F	; 95
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 e8       	ldi	r24, 0x80	; 128
     b66:	80 83       	st	Z, r24


	UART_ConfigType confing_uart = {_8_bit ,disabled , bit_1 , 9600};
     b68:	ce 01       	movw	r24, r28
     b6a:	89 5b       	subi	r24, 0xB9	; 185
     b6c:	9f 4f       	sbci	r25, 0xFF	; 255
     b6e:	66 96       	adiw	r28, 0x16	; 22
     b70:	9f af       	std	Y+63, r25	; 0x3f
     b72:	8e af       	std	Y+62, r24	; 0x3e
     b74:	66 97       	sbiw	r28, 0x16	; 22
     b76:	2b e0       	ldi	r18, 0x0B	; 11
     b78:	31 e0       	ldi	r19, 0x01	; 1
     b7a:	68 96       	adiw	r28, 0x18	; 24
     b7c:	3f af       	std	Y+63, r19	; 0x3f
     b7e:	2e af       	std	Y+62, r18	; 0x3e
     b80:	68 97       	sbiw	r28, 0x18	; 24
     b82:	35 e0       	ldi	r19, 0x05	; 5
     b84:	69 96       	adiw	r28, 0x19	; 25
     b86:	3f af       	std	Y+63, r19	; 0x3f
     b88:	69 97       	sbiw	r28, 0x19	; 25
     b8a:	68 96       	adiw	r28, 0x18	; 24
     b8c:	ee ad       	ldd	r30, Y+62	; 0x3e
     b8e:	ff ad       	ldd	r31, Y+63	; 0x3f
     b90:	68 97       	sbiw	r28, 0x18	; 24
     b92:	00 80       	ld	r0, Z
     b94:	68 96       	adiw	r28, 0x18	; 24
     b96:	2e ad       	ldd	r18, Y+62	; 0x3e
     b98:	3f ad       	ldd	r19, Y+63	; 0x3f
     b9a:	68 97       	sbiw	r28, 0x18	; 24
     b9c:	2f 5f       	subi	r18, 0xFF	; 255
     b9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ba0:	68 96       	adiw	r28, 0x18	; 24
     ba2:	3f af       	std	Y+63, r19	; 0x3f
     ba4:	2e af       	std	Y+62, r18	; 0x3e
     ba6:	68 97       	sbiw	r28, 0x18	; 24
     ba8:	66 96       	adiw	r28, 0x16	; 22
     baa:	ee ad       	ldd	r30, Y+62	; 0x3e
     bac:	ff ad       	ldd	r31, Y+63	; 0x3f
     bae:	66 97       	sbiw	r28, 0x16	; 22
     bb0:	00 82       	st	Z, r0
     bb2:	66 96       	adiw	r28, 0x16	; 22
     bb4:	2e ad       	ldd	r18, Y+62	; 0x3e
     bb6:	3f ad       	ldd	r19, Y+63	; 0x3f
     bb8:	66 97       	sbiw	r28, 0x16	; 22
     bba:	2f 5f       	subi	r18, 0xFF	; 255
     bbc:	3f 4f       	sbci	r19, 0xFF	; 255
     bbe:	66 96       	adiw	r28, 0x16	; 22
     bc0:	3f af       	std	Y+63, r19	; 0x3f
     bc2:	2e af       	std	Y+62, r18	; 0x3e
     bc4:	66 97       	sbiw	r28, 0x16	; 22
     bc6:	69 96       	adiw	r28, 0x19	; 25
     bc8:	3f ad       	ldd	r19, Y+63	; 0x3f
     bca:	69 97       	sbiw	r28, 0x19	; 25
     bcc:	31 50       	subi	r19, 0x01	; 1
     bce:	69 96       	adiw	r28, 0x19	; 25
     bd0:	3f af       	std	Y+63, r19	; 0x3f
     bd2:	69 97       	sbiw	r28, 0x19	; 25
     bd4:	69 96       	adiw	r28, 0x19	; 25
     bd6:	8f ad       	ldd	r24, Y+63	; 0x3f
     bd8:	69 97       	sbiw	r28, 0x19	; 25
     bda:	88 23       	and	r24, r24
     bdc:	b1 f6       	brne	.-84     	; 0xb8a <main+0x44>
	UART_init(&confing_uart);
     bde:	ce 01       	movw	r24, r28
     be0:	89 5b       	subi	r24, 0xB9	; 185
     be2:	9f 4f       	sbci	r25, 0xFF	; 255
     be4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <UART_init>
	Timer1_ConfigType confing_timer1 = {0 , 7810 , _1024 , COMPARE_MODE } ;
     be8:	ce 01       	movw	r24, r28
     bea:	84 5b       	subi	r24, 0xB4	; 180
     bec:	9f 4f       	sbci	r25, 0xFF	; 255
     bee:	6b 96       	adiw	r28, 0x1b	; 27
     bf0:	9f af       	std	Y+63, r25	; 0x3f
     bf2:	8e af       	std	Y+62, r24	; 0x3e
     bf4:	6b 97       	sbiw	r28, 0x1b	; 27
     bf6:	e5 e0       	ldi	r30, 0x05	; 5
     bf8:	f1 e0       	ldi	r31, 0x01	; 1
     bfa:	6d 96       	adiw	r28, 0x1d	; 29
     bfc:	ff af       	std	Y+63, r31	; 0x3f
     bfe:	ee af       	std	Y+62, r30	; 0x3e
     c00:	6d 97       	sbiw	r28, 0x1d	; 29
     c02:	f6 e0       	ldi	r31, 0x06	; 6
     c04:	6e 96       	adiw	r28, 0x1e	; 30
     c06:	ff af       	std	Y+63, r31	; 0x3f
     c08:	6e 97       	sbiw	r28, 0x1e	; 30
     c0a:	6d 96       	adiw	r28, 0x1d	; 29
     c0c:	ee ad       	ldd	r30, Y+62	; 0x3e
     c0e:	ff ad       	ldd	r31, Y+63	; 0x3f
     c10:	6d 97       	sbiw	r28, 0x1d	; 29
     c12:	00 80       	ld	r0, Z
     c14:	6d 96       	adiw	r28, 0x1d	; 29
     c16:	2e ad       	ldd	r18, Y+62	; 0x3e
     c18:	3f ad       	ldd	r19, Y+63	; 0x3f
     c1a:	6d 97       	sbiw	r28, 0x1d	; 29
     c1c:	2f 5f       	subi	r18, 0xFF	; 255
     c1e:	3f 4f       	sbci	r19, 0xFF	; 255
     c20:	6d 96       	adiw	r28, 0x1d	; 29
     c22:	3f af       	std	Y+63, r19	; 0x3f
     c24:	2e af       	std	Y+62, r18	; 0x3e
     c26:	6d 97       	sbiw	r28, 0x1d	; 29
     c28:	6b 96       	adiw	r28, 0x1b	; 27
     c2a:	ee ad       	ldd	r30, Y+62	; 0x3e
     c2c:	ff ad       	ldd	r31, Y+63	; 0x3f
     c2e:	6b 97       	sbiw	r28, 0x1b	; 27
     c30:	00 82       	st	Z, r0
     c32:	6b 96       	adiw	r28, 0x1b	; 27
     c34:	2e ad       	ldd	r18, Y+62	; 0x3e
     c36:	3f ad       	ldd	r19, Y+63	; 0x3f
     c38:	6b 97       	sbiw	r28, 0x1b	; 27
     c3a:	2f 5f       	subi	r18, 0xFF	; 255
     c3c:	3f 4f       	sbci	r19, 0xFF	; 255
     c3e:	6b 96       	adiw	r28, 0x1b	; 27
     c40:	3f af       	std	Y+63, r19	; 0x3f
     c42:	2e af       	std	Y+62, r18	; 0x3e
     c44:	6b 97       	sbiw	r28, 0x1b	; 27
     c46:	6e 96       	adiw	r28, 0x1e	; 30
     c48:	3f ad       	ldd	r19, Y+63	; 0x3f
     c4a:	6e 97       	sbiw	r28, 0x1e	; 30
     c4c:	31 50       	subi	r19, 0x01	; 1
     c4e:	6e 96       	adiw	r28, 0x1e	; 30
     c50:	3f af       	std	Y+63, r19	; 0x3f
     c52:	6e 97       	sbiw	r28, 0x1e	; 30
     c54:	6e 96       	adiw	r28, 0x1e	; 30
     c56:	8f ad       	ldd	r24, Y+63	; 0x3f
     c58:	6e 97       	sbiw	r28, 0x1e	; 30
     c5a:	88 23       	and	r24, r24
     c5c:	b1 f6       	brne	.-84     	; 0xc0a <main+0xc4>
	Timer1_init(&confing_timer1);
     c5e:	ce 01       	movw	r24, r28
     c60:	84 5b       	subi	r24, 0xB4	; 180
     c62:	9f 4f       	sbci	r25, 0xFF	; 255
     c64:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <Timer1_init>
	Timer1_setCallBack(cullBackTimer_1);
     c68:	89 eb       	ldi	r24, 0xB9	; 185
     c6a:	9c e0       	ldi	r25, 0x0C	; 12
     c6c:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <Timer1_setCallBack>


	LCD_init();
     c70:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_init>
	flag_uartPassInit = resevebyte_from_uart();
     c74:	0e 94 3b 0c 	call	0x1876	; 0x1876 <resevebyte_from_uart>
     c78:	80 93 1a 01 	sts	0x011A, r24

	if (flag_uartPassInit == UART_PASS_INIT )
     c7c:	80 91 1a 01 	lds	r24, 0x011A
     c80:	8a 32       	cpi	r24, 0x2A	; 42
     c82:	09 f0       	breq	.+2      	; 0xc86 <main+0x140>
     c84:	8e c0       	rjmp	.+284    	; 0xda2 <main+0x25c>
	{
		resevePass();
     c86:	0e 94 66 0c 	call	0x18cc	; 0x18cc <resevePass>
		LCD_clearScreen();
     c8a:	0e 94 74 18 	call	0x30e8	; 0x30e8 <LCD_clearScreen>
		LCD_displayString("pass init");
     c8e:	80 e6       	ldi	r24, 0x60	; 96
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_displayString>
     c96:	fe 01       	movw	r30, r28
     c98:	ed 5b       	subi	r30, 0xBD	; 189
     c9a:	ff 4f       	sbci	r31, 0xFF	; 255
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	aa e7       	ldi	r26, 0x7A	; 122
     ca2:	b4 e4       	ldi	r27, 0x44	; 68
     ca4:	80 83       	st	Z, r24
     ca6:	91 83       	std	Z+1, r25	; 0x01
     ca8:	a2 83       	std	Z+2, r26	; 0x02
     caa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cac:	8e 01       	movw	r16, r28
     cae:	01 5c       	subi	r16, 0xC1	; 193
     cb0:	1f 4f       	sbci	r17, 0xFF	; 255
     cb2:	fe 01       	movw	r30, r28
     cb4:	ed 5b       	subi	r30, 0xBD	; 189
     cb6:	ff 4f       	sbci	r31, 0xFF	; 255
     cb8:	60 81       	ld	r22, Z
     cba:	71 81       	ldd	r23, Z+1	; 0x01
     cbc:	82 81       	ldd	r24, Z+2	; 0x02
     cbe:	93 81       	ldd	r25, Z+3	; 0x03
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	4a ef       	ldi	r20, 0xFA	; 250
     cc6:	54 e4       	ldi	r21, 0x44	; 68
     cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ccc:	dc 01       	movw	r26, r24
     cce:	cb 01       	movw	r24, r22
     cd0:	f8 01       	movw	r30, r16
     cd2:	80 83       	st	Z, r24
     cd4:	91 83       	std	Z+1, r25	; 0x01
     cd6:	a2 83       	std	Z+2, r26	; 0x02
     cd8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     cda:	fe 01       	movw	r30, r28
     cdc:	ff 96       	adiw	r30, 0x3f	; 63
     cde:	60 81       	ld	r22, Z
     ce0:	71 81       	ldd	r23, Z+1	; 0x01
     ce2:	82 81       	ldd	r24, Z+2	; 0x02
     ce4:	93 81       	ldd	r25, Z+3	; 0x03
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 e8       	ldi	r20, 0x80	; 128
     cec:	5f e3       	ldi	r21, 0x3F	; 63
     cee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cf2:	88 23       	and	r24, r24
     cf4:	2c f4       	brge	.+10     	; 0xd00 <main+0x1ba>
		__ticks = 1;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	9e af       	std	Y+62, r25	; 0x3e
     cfc:	8d af       	std	Y+61, r24	; 0x3d
     cfe:	46 c0       	rjmp	.+140    	; 0xd8c <main+0x246>
	else if (__tmp > 65535)
     d00:	fe 01       	movw	r30, r28
     d02:	ff 96       	adiw	r30, 0x3f	; 63
     d04:	60 81       	ld	r22, Z
     d06:	71 81       	ldd	r23, Z+1	; 0x01
     d08:	82 81       	ldd	r24, Z+2	; 0x02
     d0a:	93 81       	ldd	r25, Z+3	; 0x03
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	3f ef       	ldi	r19, 0xFF	; 255
     d10:	4f e7       	ldi	r20, 0x7F	; 127
     d12:	57 e4       	ldi	r21, 0x47	; 71
     d14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d18:	18 16       	cp	r1, r24
     d1a:	64 f5       	brge	.+88     	; 0xd74 <main+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d1c:	fe 01       	movw	r30, r28
     d1e:	ed 5b       	subi	r30, 0xBD	; 189
     d20:	ff 4f       	sbci	r31, 0xFF	; 255
     d22:	60 81       	ld	r22, Z
     d24:	71 81       	ldd	r23, Z+1	; 0x01
     d26:	82 81       	ldd	r24, Z+2	; 0x02
     d28:	93 81       	ldd	r25, Z+3	; 0x03
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e2       	ldi	r20, 0x20	; 32
     d30:	51 e4       	ldi	r21, 0x41	; 65
     d32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	bc 01       	movw	r22, r24
     d3c:	cd 01       	movw	r24, r26
     d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	9e af       	std	Y+62, r25	; 0x3e
     d48:	8d af       	std	Y+61, r24	; 0x3d
     d4a:	0f c0       	rjmp	.+30     	; 0xd6a <main+0x224>
     d4c:	88 ec       	ldi	r24, 0xC8	; 200
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	9c af       	std	Y+60, r25	; 0x3c
     d52:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d54:	8b ad       	ldd	r24, Y+59	; 0x3b
     d56:	9c ad       	ldd	r25, Y+60	; 0x3c
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <main+0x212>
     d5c:	9c af       	std	Y+60, r25	; 0x3c
     d5e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d60:	8d ad       	ldd	r24, Y+61	; 0x3d
     d62:	9e ad       	ldd	r25, Y+62	; 0x3e
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	9e af       	std	Y+62, r25	; 0x3e
     d68:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d6a:	8d ad       	ldd	r24, Y+61	; 0x3d
     d6c:	9e ad       	ldd	r25, Y+62	; 0x3e
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	69 f7       	brne	.-38     	; 0xd4c <main+0x206>
     d72:	23 c0       	rjmp	.+70     	; 0xdba <main+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d74:	fe 01       	movw	r30, r28
     d76:	ff 96       	adiw	r30, 0x3f	; 63
     d78:	60 81       	ld	r22, Z
     d7a:	71 81       	ldd	r23, Z+1	; 0x01
     d7c:	82 81       	ldd	r24, Z+2	; 0x02
     d7e:	93 81       	ldd	r25, Z+3	; 0x03
     d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d84:	dc 01       	movw	r26, r24
     d86:	cb 01       	movw	r24, r22
     d88:	9e af       	std	Y+62, r25	; 0x3e
     d8a:	8d af       	std	Y+61, r24	; 0x3d
     d8c:	8d ad       	ldd	r24, Y+61	; 0x3d
     d8e:	9e ad       	ldd	r25, Y+62	; 0x3e
     d90:	9a af       	std	Y+58, r25	; 0x3a
     d92:	89 af       	std	Y+57, r24	; 0x39
     d94:	89 ad       	ldd	r24, Y+57	; 0x39
     d96:	9a ad       	ldd	r25, Y+58	; 0x3a
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <main+0x252>
     d9c:	9a af       	std	Y+58, r25	; 0x3a
     d9e:	89 af       	std	Y+57, r24	; 0x39
     da0:	0c c0       	rjmp	.+24     	; 0xdba <main+0x274>
		_delay_ms(1000);
	}
	else if (flag_uartPassInit == UART_PASS_UNINIT)
     da2:	80 91 1a 01 	lds	r24, 0x011A
     da6:	81 32       	cpi	r24, 0x21	; 33
     da8:	41 f4       	brne	.+16     	; 0xdba <main+0x274>
	{
		do{
			pass_init();
     daa:	0e 94 32 0a 	call	0x1464	; 0x1464 <pass_init>

		}while(re_enter());
     dae:	0e 94 65 0b 	call	0x16ca	; 0x16ca <re_enter>
     db2:	88 23       	and	r24, r24
     db4:	d1 f7       	brne	.-12     	; 0xdaa <main+0x264>
		sendPass();
     db6:	0e 94 95 0c 	call	0x192a	; 0x192a <sendPass>
	}
	LCD_clearScreen();
     dba:	0e 94 74 18 	call	0x30e8	; 0x30e8 <LCD_clearScreen>


	while (1)
	{
		LCD_clearScreen();
     dbe:	0e 94 74 18 	call	0x30e8	; 0x30e8 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "+ : OPEN DOOR");
     dc2:	2a e6       	ldi	r18, 0x6A	; 106
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	a9 01       	movw	r20, r18
     dcc:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "- : CHANGE PASS");
     dd0:	28 e7       	ldi	r18, 0x78	; 120
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	a9 01       	movw	r20, r18
     dda:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_displayStringRowColumn>
		g_keyMood = KEYPAD_getPressedKey();
     dde:	0e 94 c8 11 	call	0x2390	; 0x2390 <KEYPAD_getPressedKey>
     de2:	80 93 1e 01 	sts	0x011E, r24
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	aa ef       	ldi	r26, 0xFA	; 250
     dec:	b3 e4       	ldi	r27, 0x43	; 67
     dee:	8d ab       	std	Y+53, r24	; 0x35
     df0:	9e ab       	std	Y+54, r25	; 0x36
     df2:	af ab       	std	Y+55, r26	; 0x37
     df4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     df6:	6d a9       	ldd	r22, Y+53	; 0x35
     df8:	7e a9       	ldd	r23, Y+54	; 0x36
     dfa:	8f a9       	ldd	r24, Y+55	; 0x37
     dfc:	98 ad       	ldd	r25, Y+56	; 0x38
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	4a ef       	ldi	r20, 0xFA	; 250
     e04:	54 e4       	ldi	r21, 0x44	; 68
     e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	89 ab       	std	Y+49, r24	; 0x31
     e10:	9a ab       	std	Y+50, r25	; 0x32
     e12:	ab ab       	std	Y+51, r26	; 0x33
     e14:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e16:	69 a9       	ldd	r22, Y+49	; 0x31
     e18:	7a a9       	ldd	r23, Y+50	; 0x32
     e1a:	8b a9       	ldd	r24, Y+51	; 0x33
     e1c:	9c a9       	ldd	r25, Y+52	; 0x34
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	40 e8       	ldi	r20, 0x80	; 128
     e24:	5f e3       	ldi	r21, 0x3F	; 63
     e26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e2a:	88 23       	and	r24, r24
     e2c:	2c f4       	brge	.+10     	; 0xe38 <main+0x2f2>
		__ticks = 1;
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	98 ab       	std	Y+48, r25	; 0x30
     e34:	8f a7       	std	Y+47, r24	; 0x2f
     e36:	3f c0       	rjmp	.+126    	; 0xeb6 <main+0x370>
	else if (__tmp > 65535)
     e38:	69 a9       	ldd	r22, Y+49	; 0x31
     e3a:	7a a9       	ldd	r23, Y+50	; 0x32
     e3c:	8b a9       	ldd	r24, Y+51	; 0x33
     e3e:	9c a9       	ldd	r25, Y+52	; 0x34
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	3f ef       	ldi	r19, 0xFF	; 255
     e44:	4f e7       	ldi	r20, 0x7F	; 127
     e46:	57 e4       	ldi	r21, 0x47	; 71
     e48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e4c:	18 16       	cp	r1, r24
     e4e:	4c f5       	brge	.+82     	; 0xea2 <main+0x35c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e50:	6d a9       	ldd	r22, Y+53	; 0x35
     e52:	7e a9       	ldd	r23, Y+54	; 0x36
     e54:	8f a9       	ldd	r24, Y+55	; 0x37
     e56:	98 ad       	ldd	r25, Y+56	; 0x38
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e2       	ldi	r20, 0x20	; 32
     e5e:	51 e4       	ldi	r21, 0x41	; 65
     e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	bc 01       	movw	r22, r24
     e6a:	cd 01       	movw	r24, r26
     e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	98 ab       	std	Y+48, r25	; 0x30
     e76:	8f a7       	std	Y+47, r24	; 0x2f
     e78:	0f c0       	rjmp	.+30     	; 0xe98 <main+0x352>
     e7a:	88 ec       	ldi	r24, 0xC8	; 200
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	9e a7       	std	Y+46, r25	; 0x2e
     e80:	8d a7       	std	Y+45, r24	; 0x2d
     e82:	8d a5       	ldd	r24, Y+45	; 0x2d
     e84:	9e a5       	ldd	r25, Y+46	; 0x2e
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	f1 f7       	brne	.-4      	; 0xe86 <main+0x340>
     e8a:	9e a7       	std	Y+46, r25	; 0x2e
     e8c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e8e:	8f a5       	ldd	r24, Y+47	; 0x2f
     e90:	98 a9       	ldd	r25, Y+48	; 0x30
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	98 ab       	std	Y+48, r25	; 0x30
     e96:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e98:	8f a5       	ldd	r24, Y+47	; 0x2f
     e9a:	98 a9       	ldd	r25, Y+48	; 0x30
     e9c:	00 97       	sbiw	r24, 0x00	; 0
     e9e:	69 f7       	brne	.-38     	; 0xe7a <main+0x334>
     ea0:	14 c0       	rjmp	.+40     	; 0xeca <main+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea2:	69 a9       	ldd	r22, Y+49	; 0x31
     ea4:	7a a9       	ldd	r23, Y+50	; 0x32
     ea6:	8b a9       	ldd	r24, Y+51	; 0x33
     ea8:	9c a9       	ldd	r25, Y+52	; 0x34
     eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	98 ab       	std	Y+48, r25	; 0x30
     eb4:	8f a7       	std	Y+47, r24	; 0x2f
     eb6:	8f a5       	ldd	r24, Y+47	; 0x2f
     eb8:	98 a9       	ldd	r25, Y+48	; 0x30
     eba:	9c a7       	std	Y+44, r25	; 0x2c
     ebc:	8b a7       	std	Y+43, r24	; 0x2b
     ebe:	8b a5       	ldd	r24, Y+43	; 0x2b
     ec0:	9c a5       	ldd	r25, Y+44	; 0x2c
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	f1 f7       	brne	.-4      	; 0xec2 <main+0x37c>
     ec6:	9c a7       	std	Y+44, r25	; 0x2c
     ec8:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(500);
		switch (g_keyMood)
     eca:	80 91 1e 01 	lds	r24, 0x011E
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	64 96       	adiw	r28, 0x14	; 20
     ed4:	3f af       	std	Y+63, r19	; 0x3f
     ed6:	2e af       	std	Y+62, r18	; 0x3e
     ed8:	64 97       	sbiw	r28, 0x14	; 20
     eda:	64 96       	adiw	r28, 0x14	; 20
     edc:	8e ad       	ldd	r24, Y+62	; 0x3e
     ede:	9f ad       	ldd	r25, Y+63	; 0x3f
     ee0:	64 97       	sbiw	r28, 0x14	; 20
     ee2:	8b 32       	cpi	r24, 0x2B	; 43
     ee4:	91 05       	cpc	r25, r1
     ee6:	49 f0       	breq	.+18     	; 0xefa <main+0x3b4>
     ee8:	64 96       	adiw	r28, 0x14	; 20
     eea:	ee ad       	ldd	r30, Y+62	; 0x3e
     eec:	ff ad       	ldd	r31, Y+63	; 0x3f
     eee:	64 97       	sbiw	r28, 0x14	; 20
     ef0:	ed 32       	cpi	r30, 0x2D	; 45
     ef2:	f1 05       	cpc	r31, r1
     ef4:	09 f4       	brne	.+2      	; 0xef8 <main+0x3b2>
     ef6:	ab c0       	rjmp	.+342    	; 0x104e <main+0x508>
     ef8:	c7 c1       	rjmp	.+910    	; 0x1288 <main+0x742>
		{
		case '+':
			if (cheak_pass())
     efa:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <cheak_pass>
     efe:	88 23       	and	r24, r24
     f00:	99 f0       	breq	.+38     	; 0xf28 <main+0x3e2>
			{
				send_to_uart(UART_DC_MOTOR_OPEN);
     f02:	83 e2       	ldi	r24, 0x23	; 35
     f04:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <send_to_uart>
				LCD_clearScreen();
     f08:	0e 94 74 18 	call	0x30e8	; 0x30e8 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, "DOOR is OPINIG");
     f0c:	28 e8       	ldi	r18, 0x88	; 136
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	a9 01       	movw	r20, r18
     f16:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_displayStringRowColumn>
				g_tick = 0;
     f1a:	10 92 20 01 	sts	0x0120, r1
				while(g_tick !=33);
     f1e:	80 91 20 01 	lds	r24, 0x0120
     f22:	81 32       	cpi	r24, 0x21	; 33
     f24:	e1 f7       	brne	.-8      	; 0xf1e <main+0x3d8>
     f26:	b0 c1       	rjmp	.+864    	; 0x1288 <main+0x742>

			}
			else
			{
				LCD_clearScreen();
     f28:	0e 94 74 18 	call	0x30e8	; 0x30e8 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, "NOT matching");
     f2c:	27 e9       	ldi	r18, 0x97	; 151
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	a9 01       	movw	r20, r18
     f36:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_displayStringRowColumn>
				g_warning++;
     f3a:	80 91 1b 01 	lds	r24, 0x011B
     f3e:	8f 5f       	subi	r24, 0xFF	; 255
     f40:	80 93 1b 01 	sts	0x011B, r24
				LCD_moveCursor(1,3);
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	63 e0       	ldi	r22, 0x03	; 3
     f48:	0e 94 f6 17 	call	0x2fec	; 0x2fec <LCD_moveCursor>
				LCD_intgerToString((3 - g_warning));
     f4c:	80 91 1b 01 	lds	r24, 0x011B
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	83 e0       	ldi	r24, 0x03	; 3
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	82 1b       	sub	r24, r18
     f5a:	93 0b       	sbc	r25, r19
     f5c:	0e 94 51 18 	call	0x30a2	; 0x30a2 <LCD_intgerToString>
				LCD_displayString(" chanses");
     f60:	84 ea       	ldi	r24, 0xA4	; 164
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_displayString>
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	90 e8       	ldi	r25, 0x80	; 128
     f6c:	ab eb       	ldi	r26, 0xBB	; 187
     f6e:	b4 e4       	ldi	r27, 0x44	; 68
     f70:	8f a3       	std	Y+39, r24	; 0x27
     f72:	98 a7       	std	Y+40, r25	; 0x28
     f74:	a9 a7       	std	Y+41, r26	; 0x29
     f76:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f78:	6f a1       	ldd	r22, Y+39	; 0x27
     f7a:	78 a5       	ldd	r23, Y+40	; 0x28
     f7c:	89 a5       	ldd	r24, Y+41	; 0x29
     f7e:	9a a5       	ldd	r25, Y+42	; 0x2a
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	4a ef       	ldi	r20, 0xFA	; 250
     f86:	54 e4       	ldi	r21, 0x44	; 68
     f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	8b a3       	std	Y+35, r24	; 0x23
     f92:	9c a3       	std	Y+36, r25	; 0x24
     f94:	ad a3       	std	Y+37, r26	; 0x25
     f96:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f98:	6b a1       	ldd	r22, Y+35	; 0x23
     f9a:	7c a1       	ldd	r23, Y+36	; 0x24
     f9c:	8d a1       	ldd	r24, Y+37	; 0x25
     f9e:	9e a1       	ldd	r25, Y+38	; 0x26
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e8       	ldi	r20, 0x80	; 128
     fa6:	5f e3       	ldi	r21, 0x3F	; 63
     fa8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fac:	88 23       	and	r24, r24
     fae:	2c f4       	brge	.+10     	; 0xfba <main+0x474>
		__ticks = 1;
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	9a a3       	std	Y+34, r25	; 0x22
     fb6:	89 a3       	std	Y+33, r24	; 0x21
     fb8:	3f c0       	rjmp	.+126    	; 0x1038 <main+0x4f2>
	else if (__tmp > 65535)
     fba:	6b a1       	ldd	r22, Y+35	; 0x23
     fbc:	7c a1       	ldd	r23, Y+36	; 0x24
     fbe:	8d a1       	ldd	r24, Y+37	; 0x25
     fc0:	9e a1       	ldd	r25, Y+38	; 0x26
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	3f ef       	ldi	r19, 0xFF	; 255
     fc6:	4f e7       	ldi	r20, 0x7F	; 127
     fc8:	57 e4       	ldi	r21, 0x47	; 71
     fca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fce:	18 16       	cp	r1, r24
     fd0:	4c f5       	brge	.+82     	; 0x1024 <main+0x4de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd2:	6f a1       	ldd	r22, Y+39	; 0x27
     fd4:	78 a5       	ldd	r23, Y+40	; 0x28
     fd6:	89 a5       	ldd	r24, Y+41	; 0x29
     fd8:	9a a5       	ldd	r25, Y+42	; 0x2a
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	40 e2       	ldi	r20, 0x20	; 32
     fe0:	51 e4       	ldi	r21, 0x41	; 65
     fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	bc 01       	movw	r22, r24
     fec:	cd 01       	movw	r24, r26
     fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	9a a3       	std	Y+34, r25	; 0x22
     ff8:	89 a3       	std	Y+33, r24	; 0x21
     ffa:	0f c0       	rjmp	.+30     	; 0x101a <main+0x4d4>
     ffc:	88 ec       	ldi	r24, 0xC8	; 200
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	98 a3       	std	Y+32, r25	; 0x20
    1002:	8f 8f       	std	Y+31, r24	; 0x1f
    1004:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1006:	98 a1       	ldd	r25, Y+32	; 0x20
    1008:	01 97       	sbiw	r24, 0x01	; 1
    100a:	f1 f7       	brne	.-4      	; 0x1008 <main+0x4c2>
    100c:	98 a3       	std	Y+32, r25	; 0x20
    100e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1010:	89 a1       	ldd	r24, Y+33	; 0x21
    1012:	9a a1       	ldd	r25, Y+34	; 0x22
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	9a a3       	std	Y+34, r25	; 0x22
    1018:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101a:	89 a1       	ldd	r24, Y+33	; 0x21
    101c:	9a a1       	ldd	r25, Y+34	; 0x22
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	69 f7       	brne	.-38     	; 0xffc <main+0x4b6>
    1022:	32 c1       	rjmp	.+612    	; 0x1288 <main+0x742>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1024:	6b a1       	ldd	r22, Y+35	; 0x23
    1026:	7c a1       	ldd	r23, Y+36	; 0x24
    1028:	8d a1       	ldd	r24, Y+37	; 0x25
    102a:	9e a1       	ldd	r25, Y+38	; 0x26
    102c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	9a a3       	std	Y+34, r25	; 0x22
    1036:	89 a3       	std	Y+33, r24	; 0x21
    1038:	89 a1       	ldd	r24, Y+33	; 0x21
    103a:	9a a1       	ldd	r25, Y+34	; 0x22
    103c:	9e 8f       	std	Y+30, r25	; 0x1e
    103e:	8d 8f       	std	Y+29, r24	; 0x1d
    1040:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1042:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	f1 f7       	brne	.-4      	; 0x1044 <main+0x4fe>
    1048:	9e 8f       	std	Y+30, r25	; 0x1e
    104a:	8d 8f       	std	Y+29, r24	; 0x1d
    104c:	1d c1       	rjmp	.+570    	; 0x1288 <main+0x742>

			}

			break;
		case '-':
			if (cheak_pass())
    104e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <cheak_pass>
    1052:	88 23       	and	r24, r24
    1054:	09 f4       	brne	.+2      	; 0x1058 <main+0x512>
    1056:	86 c0       	rjmp	.+268    	; 0x1164 <main+0x61e>
			{
				LCD_clearScreen();
    1058:	0e 94 74 18 	call	0x30e8	; 0x30e8 <LCD_clearScreen>
				do{
					pass_init();
    105c:	0e 94 32 0a 	call	0x1464	; 0x1464 <pass_init>

				}while(re_enter());
    1060:	0e 94 65 0b 	call	0x16ca	; 0x16ca <re_enter>
    1064:	88 23       	and	r24, r24
    1066:	d1 f7       	brne	.-12     	; 0x105c <main+0x516>
				send_to_uart(UART_CHANG_PASS);
    1068:	81 e4       	ldi	r24, 0x41	; 65
    106a:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <send_to_uart>
				sendPass();
    106e:	0e 94 95 0c 	call	0x192a	; 0x192a <sendPass>
				LCD_clearScreen();
    1072:	0e 94 74 18 	call	0x30e8	; 0x30e8 <LCD_clearScreen>
				LCD_displayString("PASS is change");
    1076:	8d ea       	ldi	r24, 0xAD	; 173
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_displayString>
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	aa e7       	ldi	r26, 0x7A	; 122
    1084:	b4 e4       	ldi	r27, 0x44	; 68
    1086:	89 8f       	std	Y+25, r24	; 0x19
    1088:	9a 8f       	std	Y+26, r25	; 0x1a
    108a:	ab 8f       	std	Y+27, r26	; 0x1b
    108c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    108e:	69 8d       	ldd	r22, Y+25	; 0x19
    1090:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1092:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1094:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	4a ef       	ldi	r20, 0xFA	; 250
    109c:	54 e4       	ldi	r21, 0x44	; 68
    109e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	8d 8b       	std	Y+21, r24	; 0x15
    10a8:	9e 8b       	std	Y+22, r25	; 0x16
    10aa:	af 8b       	std	Y+23, r26	; 0x17
    10ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10ae:	6d 89       	ldd	r22, Y+21	; 0x15
    10b0:	7e 89       	ldd	r23, Y+22	; 0x16
    10b2:	8f 89       	ldd	r24, Y+23	; 0x17
    10b4:	98 8d       	ldd	r25, Y+24	; 0x18
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	40 e8       	ldi	r20, 0x80	; 128
    10bc:	5f e3       	ldi	r21, 0x3F	; 63
    10be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10c2:	88 23       	and	r24, r24
    10c4:	2c f4       	brge	.+10     	; 0x10d0 <main+0x58a>
		__ticks = 1;
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	9c 8b       	std	Y+20, r25	; 0x14
    10cc:	8b 8b       	std	Y+19, r24	; 0x13
    10ce:	3f c0       	rjmp	.+126    	; 0x114e <main+0x608>
	else if (__tmp > 65535)
    10d0:	6d 89       	ldd	r22, Y+21	; 0x15
    10d2:	7e 89       	ldd	r23, Y+22	; 0x16
    10d4:	8f 89       	ldd	r24, Y+23	; 0x17
    10d6:	98 8d       	ldd	r25, Y+24	; 0x18
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	3f ef       	ldi	r19, 0xFF	; 255
    10dc:	4f e7       	ldi	r20, 0x7F	; 127
    10de:	57 e4       	ldi	r21, 0x47	; 71
    10e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10e4:	18 16       	cp	r1, r24
    10e6:	4c f5       	brge	.+82     	; 0x113a <main+0x5f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e8:	69 8d       	ldd	r22, Y+25	; 0x19
    10ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	40 e2       	ldi	r20, 0x20	; 32
    10f6:	51 e4       	ldi	r21, 0x41	; 65
    10f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22
    1100:	bc 01       	movw	r22, r24
    1102:	cd 01       	movw	r24, r26
    1104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1108:	dc 01       	movw	r26, r24
    110a:	cb 01       	movw	r24, r22
    110c:	9c 8b       	std	Y+20, r25	; 0x14
    110e:	8b 8b       	std	Y+19, r24	; 0x13
    1110:	0f c0       	rjmp	.+30     	; 0x1130 <main+0x5ea>
    1112:	88 ec       	ldi	r24, 0xC8	; 200
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	9a 8b       	std	Y+18, r25	; 0x12
    1118:	89 8b       	std	Y+17, r24	; 0x11
    111a:	89 89       	ldd	r24, Y+17	; 0x11
    111c:	9a 89       	ldd	r25, Y+18	; 0x12
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	f1 f7       	brne	.-4      	; 0x111e <main+0x5d8>
    1122:	9a 8b       	std	Y+18, r25	; 0x12
    1124:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1126:	8b 89       	ldd	r24, Y+19	; 0x13
    1128:	9c 89       	ldd	r25, Y+20	; 0x14
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	9c 8b       	std	Y+20, r25	; 0x14
    112e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1130:	8b 89       	ldd	r24, Y+19	; 0x13
    1132:	9c 89       	ldd	r25, Y+20	; 0x14
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	69 f7       	brne	.-38     	; 0x1112 <main+0x5cc>
    1138:	a7 c0       	rjmp	.+334    	; 0x1288 <main+0x742>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    113a:	6d 89       	ldd	r22, Y+21	; 0x15
    113c:	7e 89       	ldd	r23, Y+22	; 0x16
    113e:	8f 89       	ldd	r24, Y+23	; 0x17
    1140:	98 8d       	ldd	r25, Y+24	; 0x18
    1142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	9c 8b       	std	Y+20, r25	; 0x14
    114c:	8b 8b       	std	Y+19, r24	; 0x13
    114e:	8b 89       	ldd	r24, Y+19	; 0x13
    1150:	9c 89       	ldd	r25, Y+20	; 0x14
    1152:	98 8b       	std	Y+16, r25	; 0x10
    1154:	8f 87       	std	Y+15, r24	; 0x0f
    1156:	8f 85       	ldd	r24, Y+15	; 0x0f
    1158:	98 89       	ldd	r25, Y+16	; 0x10
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	f1 f7       	brne	.-4      	; 0x115a <main+0x614>
    115e:	98 8b       	std	Y+16, r25	; 0x10
    1160:	8f 87       	std	Y+15, r24	; 0x0f
    1162:	92 c0       	rjmp	.+292    	; 0x1288 <main+0x742>
				_delay_ms(1000);
			}
			else
			{
				LCD_clearScreen();
    1164:	0e 94 74 18 	call	0x30e8	; 0x30e8 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, "NOT matching");
    1168:	27 e9       	ldi	r18, 0x97	; 151
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	a9 01       	movw	r20, r18
    1172:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_displayStringRowColumn>
				g_warning++;
    1176:	80 91 1b 01 	lds	r24, 0x011B
    117a:	8f 5f       	subi	r24, 0xFF	; 255
    117c:	80 93 1b 01 	sts	0x011B, r24
				LCD_moveCursor(1,3);
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	63 e0       	ldi	r22, 0x03	; 3
    1184:	0e 94 f6 17 	call	0x2fec	; 0x2fec <LCD_moveCursor>
				LCD_intgerToString((3 - g_warning));
    1188:	80 91 1b 01 	lds	r24, 0x011B
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	83 e0       	ldi	r24, 0x03	; 3
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	82 1b       	sub	r24, r18
    1196:	93 0b       	sbc	r25, r19
    1198:	0e 94 51 18 	call	0x30a2	; 0x30a2 <LCD_intgerToString>
				LCD_displayString(" chanses");
    119c:	84 ea       	ldi	r24, 0xA4	; 164
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_displayString>
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	90 e8       	ldi	r25, 0x80	; 128
    11a8:	ab eb       	ldi	r26, 0xBB	; 187
    11aa:	b4 e4       	ldi	r27, 0x44	; 68
    11ac:	8b 87       	std	Y+11, r24	; 0x0b
    11ae:	9c 87       	std	Y+12, r25	; 0x0c
    11b0:	ad 87       	std	Y+13, r26	; 0x0d
    11b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    11b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    11b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	4a ef       	ldi	r20, 0xFA	; 250
    11c2:	54 e4       	ldi	r21, 0x44	; 68
    11c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	8f 83       	std	Y+7, r24	; 0x07
    11ce:	98 87       	std	Y+8, r25	; 0x08
    11d0:	a9 87       	std	Y+9, r26	; 0x09
    11d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11d4:	6f 81       	ldd	r22, Y+7	; 0x07
    11d6:	78 85       	ldd	r23, Y+8	; 0x08
    11d8:	89 85       	ldd	r24, Y+9	; 0x09
    11da:	9a 85       	ldd	r25, Y+10	; 0x0a
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	40 e8       	ldi	r20, 0x80	; 128
    11e2:	5f e3       	ldi	r21, 0x3F	; 63
    11e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11e8:	88 23       	and	r24, r24
    11ea:	2c f4       	brge	.+10     	; 0x11f6 <main+0x6b0>
		__ticks = 1;
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	9e 83       	std	Y+6, r25	; 0x06
    11f2:	8d 83       	std	Y+5, r24	; 0x05
    11f4:	3f c0       	rjmp	.+126    	; 0x1274 <main+0x72e>
	else if (__tmp > 65535)
    11f6:	6f 81       	ldd	r22, Y+7	; 0x07
    11f8:	78 85       	ldd	r23, Y+8	; 0x08
    11fa:	89 85       	ldd	r24, Y+9	; 0x09
    11fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	3f ef       	ldi	r19, 0xFF	; 255
    1202:	4f e7       	ldi	r20, 0x7F	; 127
    1204:	57 e4       	ldi	r21, 0x47	; 71
    1206:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    120a:	18 16       	cp	r1, r24
    120c:	4c f5       	brge	.+82     	; 0x1260 <main+0x71a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    120e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1210:	7c 85       	ldd	r23, Y+12	; 0x0c
    1212:	8d 85       	ldd	r24, Y+13	; 0x0d
    1214:	9e 85       	ldd	r25, Y+14	; 0x0e
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	40 e2       	ldi	r20, 0x20	; 32
    121c:	51 e4       	ldi	r21, 0x41	; 65
    121e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	bc 01       	movw	r22, r24
    1228:	cd 01       	movw	r24, r26
    122a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	9e 83       	std	Y+6, r25	; 0x06
    1234:	8d 83       	std	Y+5, r24	; 0x05
    1236:	0f c0       	rjmp	.+30     	; 0x1256 <main+0x710>
    1238:	88 ec       	ldi	r24, 0xC8	; 200
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	9c 83       	std	Y+4, r25	; 0x04
    123e:	8b 83       	std	Y+3, r24	; 0x03
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	9c 81       	ldd	r25, Y+4	; 0x04
    1244:	01 97       	sbiw	r24, 0x01	; 1
    1246:	f1 f7       	brne	.-4      	; 0x1244 <main+0x6fe>
    1248:	9c 83       	std	Y+4, r25	; 0x04
    124a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124c:	8d 81       	ldd	r24, Y+5	; 0x05
    124e:	9e 81       	ldd	r25, Y+6	; 0x06
    1250:	01 97       	sbiw	r24, 0x01	; 1
    1252:	9e 83       	std	Y+6, r25	; 0x06
    1254:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	9e 81       	ldd	r25, Y+6	; 0x06
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	69 f7       	brne	.-38     	; 0x1238 <main+0x6f2>
    125e:	14 c0       	rjmp	.+40     	; 0x1288 <main+0x742>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1260:	6f 81       	ldd	r22, Y+7	; 0x07
    1262:	78 85       	ldd	r23, Y+8	; 0x08
    1264:	89 85       	ldd	r24, Y+9	; 0x09
    1266:	9a 85       	ldd	r25, Y+10	; 0x0a
    1268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	9e 83       	std	Y+6, r25	; 0x06
    1272:	8d 83       	std	Y+5, r24	; 0x05
    1274:	8d 81       	ldd	r24, Y+5	; 0x05
    1276:	9e 81       	ldd	r25, Y+6	; 0x06
    1278:	9a 83       	std	Y+2, r25	; 0x02
    127a:	89 83       	std	Y+1, r24	; 0x01
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	9a 81       	ldd	r25, Y+2	; 0x02
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	f1 f7       	brne	.-4      	; 0x1280 <main+0x73a>
    1284:	9a 83       	std	Y+2, r25	; 0x02
    1286:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1500);

			}
			break;
		}
		if (g_warning == 3)
    1288:	80 91 1b 01 	lds	r24, 0x011B
    128c:	83 30       	cpi	r24, 0x03	; 3
    128e:	09 f0       	breq	.+2      	; 0x1292 <main+0x74c>
    1290:	96 cd       	rjmp	.-1236   	; 0xdbe <main+0x278>
		{

			send_to_uart(UART_BZZER_MODE);
    1292:	84 e2       	ldi	r24, 0x24	; 36
    1294:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <send_to_uart>
			LCD_clearScreen();
    1298:	0e 94 74 18 	call	0x30e8	; 0x30e8 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,2,"!!warning!!");
    129c:	2c eb       	ldi	r18, 0xBC	; 188
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	62 e0       	ldi	r22, 0x02	; 2
    12a4:	a9 01       	movw	r20, r18
    12a6:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_displayStringRowColumn>
			g_tick = 0;
    12aa:	10 92 20 01 	sts	0x0120, r1
			while (g_tick !=60 );
    12ae:	80 91 20 01 	lds	r24, 0x0120
    12b2:	8c 33       	cpi	r24, 0x3C	; 60
    12b4:	e1 f7       	brne	.-8      	; 0x12ae <main+0x768>
    12b6:	83 cd       	rjmp	.-1274   	; 0xdbe <main+0x278>

000012b8 <cheak_pass>:

	}

}
uint8 cheak_pass (void)
{
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
    12c0:	60 97       	sbiw	r28, 0x10	; 16
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
	uint8 l_key , l_flagCheakPass = SUCESS;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_clearScreen();
    12d0:	0e 94 74 18 	call	0x30e8	; 0x30e8 <LCD_clearScreen>
	LCD_displayString("Enter Pass check:");
    12d4:	88 ec       	ldi	r24, 0xC8	; 200
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_displayString>
	for (i = 0 ; i  < SIZE_PASS ; i ++ )
    12dc:	10 92 1f 01 	sts	0x011F, r1
    12e0:	b2 c0       	rjmp	.+356    	; 0x1446 <cheak_pass+0x18e>
	{
		l_key= KEYPAD_getPressedKey();
    12e2:	0e 94 c8 11 	call	0x2390	; 0x2390 <KEYPAD_getPressedKey>
    12e6:	88 8b       	std	Y+16, r24	; 0x10

		if (!((l_key >= 0  ) && (l_key <= 9  )))
    12e8:	88 89       	ldd	r24, Y+16	; 0x10
    12ea:	8a 30       	cpi	r24, 0x0A	; 10
    12ec:	30 f0       	brcs	.+12     	; 0x12fa <cheak_pass+0x42>
		{
			i--;
    12ee:	80 91 1f 01 	lds	r24, 0x011F
    12f2:	81 50       	subi	r24, 0x01	; 1
    12f4:	80 93 1f 01 	sts	0x011F, r24
    12f8:	a1 c0       	rjmp	.+322    	; 0x143c <cheak_pass+0x184>

		}
		else
		{
			g_passcheak[i] = l_key;
    12fa:	80 91 1f 01 	lds	r24, 0x011F
    12fe:	88 2f       	mov	r24, r24
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	fc 01       	movw	r30, r24
    1304:	eb 5e       	subi	r30, 0xEB	; 235
    1306:	fe 4f       	sbci	r31, 0xFE	; 254
    1308:	88 89       	ldd	r24, Y+16	; 0x10
    130a:	80 83       	st	Z, r24
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	a6 e9       	ldi	r26, 0x96	; 150
    1312:	b3 e4       	ldi	r27, 0x43	; 67
    1314:	8b 87       	std	Y+11, r24	; 0x0b
    1316:	9c 87       	std	Y+12, r25	; 0x0c
    1318:	ad 87       	std	Y+13, r26	; 0x0d
    131a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    131c:	6b 85       	ldd	r22, Y+11	; 0x0b
    131e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1320:	8d 85       	ldd	r24, Y+13	; 0x0d
    1322:	9e 85       	ldd	r25, Y+14	; 0x0e
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	4a ef       	ldi	r20, 0xFA	; 250
    132a:	54 e4       	ldi	r21, 0x44	; 68
    132c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	8f 83       	std	Y+7, r24	; 0x07
    1336:	98 87       	std	Y+8, r25	; 0x08
    1338:	a9 87       	std	Y+9, r26	; 0x09
    133a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    133c:	6f 81       	ldd	r22, Y+7	; 0x07
    133e:	78 85       	ldd	r23, Y+8	; 0x08
    1340:	89 85       	ldd	r24, Y+9	; 0x09
    1342:	9a 85       	ldd	r25, Y+10	; 0x0a
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	40 e8       	ldi	r20, 0x80	; 128
    134a:	5f e3       	ldi	r21, 0x3F	; 63
    134c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1350:	88 23       	and	r24, r24
    1352:	2c f4       	brge	.+10     	; 0x135e <cheak_pass+0xa6>
		__ticks = 1;
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	9e 83       	std	Y+6, r25	; 0x06
    135a:	8d 83       	std	Y+5, r24	; 0x05
    135c:	3f c0       	rjmp	.+126    	; 0x13dc <cheak_pass+0x124>
	else if (__tmp > 65535)
    135e:	6f 81       	ldd	r22, Y+7	; 0x07
    1360:	78 85       	ldd	r23, Y+8	; 0x08
    1362:	89 85       	ldd	r24, Y+9	; 0x09
    1364:	9a 85       	ldd	r25, Y+10	; 0x0a
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	3f ef       	ldi	r19, 0xFF	; 255
    136a:	4f e7       	ldi	r20, 0x7F	; 127
    136c:	57 e4       	ldi	r21, 0x47	; 71
    136e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1372:	18 16       	cp	r1, r24
    1374:	4c f5       	brge	.+82     	; 0x13c8 <cheak_pass+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1376:	6b 85       	ldd	r22, Y+11	; 0x0b
    1378:	7c 85       	ldd	r23, Y+12	; 0x0c
    137a:	8d 85       	ldd	r24, Y+13	; 0x0d
    137c:	9e 85       	ldd	r25, Y+14	; 0x0e
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	40 e2       	ldi	r20, 0x20	; 32
    1384:	51 e4       	ldi	r21, 0x41	; 65
    1386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	bc 01       	movw	r22, r24
    1390:	cd 01       	movw	r24, r26
    1392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	9e 83       	std	Y+6, r25	; 0x06
    139c:	8d 83       	std	Y+5, r24	; 0x05
    139e:	0f c0       	rjmp	.+30     	; 0x13be <cheak_pass+0x106>
    13a0:	88 ec       	ldi	r24, 0xC8	; 200
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	9c 83       	std	Y+4, r25	; 0x04
    13a6:	8b 83       	std	Y+3, r24	; 0x03
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	f1 f7       	brne	.-4      	; 0x13ac <cheak_pass+0xf4>
    13b0:	9c 83       	std	Y+4, r25	; 0x04
    13b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b4:	8d 81       	ldd	r24, Y+5	; 0x05
    13b6:	9e 81       	ldd	r25, Y+6	; 0x06
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	9e 83       	std	Y+6, r25	; 0x06
    13bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13be:	8d 81       	ldd	r24, Y+5	; 0x05
    13c0:	9e 81       	ldd	r25, Y+6	; 0x06
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	69 f7       	brne	.-38     	; 0x13a0 <cheak_pass+0xe8>
    13c6:	14 c0       	rjmp	.+40     	; 0x13f0 <cheak_pass+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c8:	6f 81       	ldd	r22, Y+7	; 0x07
    13ca:	78 85       	ldd	r23, Y+8	; 0x08
    13cc:	89 85       	ldd	r24, Y+9	; 0x09
    13ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	9e 83       	std	Y+6, r25	; 0x06
    13da:	8d 83       	std	Y+5, r24	; 0x05
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	9e 81       	ldd	r25, Y+6	; 0x06
    13e0:	9a 83       	std	Y+2, r25	; 0x02
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	9a 81       	ldd	r25, Y+2	; 0x02
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	f1 f7       	brne	.-4      	; 0x13e8 <cheak_pass+0x130>
    13ec:	9a 83       	std	Y+2, r25	; 0x02
    13ee:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(300);

			LCD_moveCursor(1 , (i+2));
    13f0:	80 91 1f 01 	lds	r24, 0x011F
    13f4:	98 2f       	mov	r25, r24
    13f6:	9e 5f       	subi	r25, 0xFE	; 254
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	69 2f       	mov	r22, r25
    13fc:	0e 94 f6 17 	call	0x2fec	; 0x2fec <LCD_moveCursor>
			LCD_displayStringRowColumn(1 ,(i+2) ,"*" );
    1400:	80 91 1f 01 	lds	r24, 0x011F
    1404:	98 2f       	mov	r25, r24
    1406:	9e 5f       	subi	r25, 0xFE	; 254
    1408:	2a ed       	ldi	r18, 0xDA	; 218
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	69 2f       	mov	r22, r25
    1410:	a9 01       	movw	r20, r18
    1412:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_displayStringRowColumn>

			if (g_passcheak[i] != g_passInit[i])
    1416:	80 91 1f 01 	lds	r24, 0x011F
    141a:	88 2f       	mov	r24, r24
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	fc 01       	movw	r30, r24
    1420:	eb 5e       	subi	r30, 0xEB	; 235
    1422:	fe 4f       	sbci	r31, 0xFE	; 254
    1424:	20 81       	ld	r18, Z
    1426:	80 91 1f 01 	lds	r24, 0x011F
    142a:	88 2f       	mov	r24, r24
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	fc 01       	movw	r30, r24
    1430:	e0 5f       	subi	r30, 0xF0	; 240
    1432:	fe 4f       	sbci	r31, 0xFE	; 254
    1434:	80 81       	ld	r24, Z
    1436:	28 17       	cp	r18, r24
    1438:	09 f0       	breq	.+2      	; 0x143c <cheak_pass+0x184>
			{
				l_flagCheakPass = ERORR ;
    143a:	1f 86       	std	Y+15, r1	; 0x0f
uint8 cheak_pass (void)
{
	uint8 l_key , l_flagCheakPass = SUCESS;
	LCD_clearScreen();
	LCD_displayString("Enter Pass check:");
	for (i = 0 ; i  < SIZE_PASS ; i ++ )
    143c:	80 91 1f 01 	lds	r24, 0x011F
    1440:	8f 5f       	subi	r24, 0xFF	; 255
    1442:	80 93 1f 01 	sts	0x011F, r24
    1446:	80 91 1f 01 	lds	r24, 0x011F
    144a:	85 30       	cpi	r24, 0x05	; 5
    144c:	08 f4       	brcc	.+2      	; 0x1450 <cheak_pass+0x198>
    144e:	49 cf       	rjmp	.-366    	; 0x12e2 <cheak_pass+0x2a>


		}
	}

	return l_flagCheakPass ;
    1450:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1452:	60 96       	adiw	r28, 0x10	; 16
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	08 95       	ret

00001464 <pass_init>:


void pass_init (void)
{
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	6d 97       	sbiw	r28, 0x1d	; 29
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	f8 94       	cli
    1472:	de bf       	out	0x3e, r29	; 62
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	cd bf       	out	0x3d, r28	; 61
	uint8 l_key  ;

	LCD_clearScreen();
    1478:	0e 94 74 18 	call	0x30e8	; 0x30e8 <LCD_clearScreen>
	LCD_displayString("Enter Pass init:");
    147c:	8c ed       	ldi	r24, 0xDC	; 220
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_displayString>

	for (i = 0 ; i < SIZE_PASS ; i ++ )
    1484:	10 92 1f 01 	sts	0x011F, r1
    1488:	12 c1       	rjmp	.+548    	; 0x16ae <pass_init+0x24a>
	{
		l_key= KEYPAD_getPressedKey();
    148a:	0e 94 c8 11 	call	0x2390	; 0x2390 <KEYPAD_getPressedKey>
    148e:	8d 8f       	std	Y+29, r24	; 0x1d
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	a6 e9       	ldi	r26, 0x96	; 150
    1496:	b3 e4       	ldi	r27, 0x43	; 67
    1498:	89 8f       	std	Y+25, r24	; 0x19
    149a:	9a 8f       	std	Y+26, r25	; 0x1a
    149c:	ab 8f       	std	Y+27, r26	; 0x1b
    149e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a0:	69 8d       	ldd	r22, Y+25	; 0x19
    14a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	4a ef       	ldi	r20, 0xFA	; 250
    14ae:	54 e4       	ldi	r21, 0x44	; 68
    14b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	8d 8b       	std	Y+21, r24	; 0x15
    14ba:	9e 8b       	std	Y+22, r25	; 0x16
    14bc:	af 8b       	std	Y+23, r26	; 0x17
    14be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14c0:	6d 89       	ldd	r22, Y+21	; 0x15
    14c2:	7e 89       	ldd	r23, Y+22	; 0x16
    14c4:	8f 89       	ldd	r24, Y+23	; 0x17
    14c6:	98 8d       	ldd	r25, Y+24	; 0x18
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	40 e8       	ldi	r20, 0x80	; 128
    14ce:	5f e3       	ldi	r21, 0x3F	; 63
    14d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14d4:	88 23       	and	r24, r24
    14d6:	2c f4       	brge	.+10     	; 0x14e2 <pass_init+0x7e>
		__ticks = 1;
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	9c 8b       	std	Y+20, r25	; 0x14
    14de:	8b 8b       	std	Y+19, r24	; 0x13
    14e0:	3f c0       	rjmp	.+126    	; 0x1560 <pass_init+0xfc>
	else if (__tmp > 65535)
    14e2:	6d 89       	ldd	r22, Y+21	; 0x15
    14e4:	7e 89       	ldd	r23, Y+22	; 0x16
    14e6:	8f 89       	ldd	r24, Y+23	; 0x17
    14e8:	98 8d       	ldd	r25, Y+24	; 0x18
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	3f ef       	ldi	r19, 0xFF	; 255
    14ee:	4f e7       	ldi	r20, 0x7F	; 127
    14f0:	57 e4       	ldi	r21, 0x47	; 71
    14f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14f6:	18 16       	cp	r1, r24
    14f8:	4c f5       	brge	.+82     	; 0x154c <pass_init+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14fa:	69 8d       	ldd	r22, Y+25	; 0x19
    14fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1500:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e2       	ldi	r20, 0x20	; 32
    1508:	51 e4       	ldi	r21, 0x41	; 65
    150a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150e:	dc 01       	movw	r26, r24
    1510:	cb 01       	movw	r24, r22
    1512:	bc 01       	movw	r22, r24
    1514:	cd 01       	movw	r24, r26
    1516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	9c 8b       	std	Y+20, r25	; 0x14
    1520:	8b 8b       	std	Y+19, r24	; 0x13
    1522:	0f c0       	rjmp	.+30     	; 0x1542 <pass_init+0xde>
    1524:	88 ec       	ldi	r24, 0xC8	; 200
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	9a 8b       	std	Y+18, r25	; 0x12
    152a:	89 8b       	std	Y+17, r24	; 0x11
    152c:	89 89       	ldd	r24, Y+17	; 0x11
    152e:	9a 89       	ldd	r25, Y+18	; 0x12
    1530:	01 97       	sbiw	r24, 0x01	; 1
    1532:	f1 f7       	brne	.-4      	; 0x1530 <pass_init+0xcc>
    1534:	9a 8b       	std	Y+18, r25	; 0x12
    1536:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1538:	8b 89       	ldd	r24, Y+19	; 0x13
    153a:	9c 89       	ldd	r25, Y+20	; 0x14
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	9c 8b       	std	Y+20, r25	; 0x14
    1540:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1542:	8b 89       	ldd	r24, Y+19	; 0x13
    1544:	9c 89       	ldd	r25, Y+20	; 0x14
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	69 f7       	brne	.-38     	; 0x1524 <pass_init+0xc0>
    154a:	14 c0       	rjmp	.+40     	; 0x1574 <pass_init+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    154c:	6d 89       	ldd	r22, Y+21	; 0x15
    154e:	7e 89       	ldd	r23, Y+22	; 0x16
    1550:	8f 89       	ldd	r24, Y+23	; 0x17
    1552:	98 8d       	ldd	r25, Y+24	; 0x18
    1554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	9c 8b       	std	Y+20, r25	; 0x14
    155e:	8b 8b       	std	Y+19, r24	; 0x13
    1560:	8b 89       	ldd	r24, Y+19	; 0x13
    1562:	9c 89       	ldd	r25, Y+20	; 0x14
    1564:	98 8b       	std	Y+16, r25	; 0x10
    1566:	8f 87       	std	Y+15, r24	; 0x0f
    1568:	8f 85       	ldd	r24, Y+15	; 0x0f
    156a:	98 89       	ldd	r25, Y+16	; 0x10
    156c:	01 97       	sbiw	r24, 0x01	; 1
    156e:	f1 f7       	brne	.-4      	; 0x156c <pass_init+0x108>
    1570:	98 8b       	std	Y+16, r25	; 0x10
    1572:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);

		/*
		 * to make sure input is PIN
		 * */
		if (!((l_key >= 0  ) && (l_key <= 9  )))
    1574:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1576:	8a 30       	cpi	r24, 0x0A	; 10
    1578:	08 f4       	brcc	.+2      	; 0x157c <pass_init+0x118>
    157a:	78 c0       	rjmp	.+240    	; 0x166c <pass_init+0x208>
		{
			i--;
    157c:	80 91 1f 01 	lds	r24, 0x011F
    1580:	81 50       	subi	r24, 0x01	; 1
    1582:	80 93 1f 01 	sts	0x011F, r24
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	aa ef       	ldi	r26, 0xFA	; 250
    158c:	b3 e4       	ldi	r27, 0x43	; 67
    158e:	8b 87       	std	Y+11, r24	; 0x0b
    1590:	9c 87       	std	Y+12, r25	; 0x0c
    1592:	ad 87       	std	Y+13, r26	; 0x0d
    1594:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1596:	6b 85       	ldd	r22, Y+11	; 0x0b
    1598:	7c 85       	ldd	r23, Y+12	; 0x0c
    159a:	8d 85       	ldd	r24, Y+13	; 0x0d
    159c:	9e 85       	ldd	r25, Y+14	; 0x0e
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	4a ef       	ldi	r20, 0xFA	; 250
    15a4:	54 e4       	ldi	r21, 0x44	; 68
    15a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	8f 83       	std	Y+7, r24	; 0x07
    15b0:	98 87       	std	Y+8, r25	; 0x08
    15b2:	a9 87       	std	Y+9, r26	; 0x09
    15b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15b6:	6f 81       	ldd	r22, Y+7	; 0x07
    15b8:	78 85       	ldd	r23, Y+8	; 0x08
    15ba:	89 85       	ldd	r24, Y+9	; 0x09
    15bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	40 e8       	ldi	r20, 0x80	; 128
    15c4:	5f e3       	ldi	r21, 0x3F	; 63
    15c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ca:	88 23       	and	r24, r24
    15cc:	2c f4       	brge	.+10     	; 0x15d8 <pass_init+0x174>
		__ticks = 1;
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	9e 83       	std	Y+6, r25	; 0x06
    15d4:	8d 83       	std	Y+5, r24	; 0x05
    15d6:	3f c0       	rjmp	.+126    	; 0x1656 <pass_init+0x1f2>
	else if (__tmp > 65535)
    15d8:	6f 81       	ldd	r22, Y+7	; 0x07
    15da:	78 85       	ldd	r23, Y+8	; 0x08
    15dc:	89 85       	ldd	r24, Y+9	; 0x09
    15de:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	3f ef       	ldi	r19, 0xFF	; 255
    15e4:	4f e7       	ldi	r20, 0x7F	; 127
    15e6:	57 e4       	ldi	r21, 0x47	; 71
    15e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ec:	18 16       	cp	r1, r24
    15ee:	4c f5       	brge	.+82     	; 0x1642 <pass_init+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	40 e2       	ldi	r20, 0x20	; 32
    15fe:	51 e4       	ldi	r21, 0x41	; 65
    1600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	bc 01       	movw	r22, r24
    160a:	cd 01       	movw	r24, r26
    160c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	9e 83       	std	Y+6, r25	; 0x06
    1616:	8d 83       	std	Y+5, r24	; 0x05
    1618:	0f c0       	rjmp	.+30     	; 0x1638 <pass_init+0x1d4>
    161a:	88 ec       	ldi	r24, 0xC8	; 200
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	9c 83       	std	Y+4, r25	; 0x04
    1620:	8b 83       	std	Y+3, r24	; 0x03
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	9c 81       	ldd	r25, Y+4	; 0x04
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	f1 f7       	brne	.-4      	; 0x1626 <pass_init+0x1c2>
    162a:	9c 83       	std	Y+4, r25	; 0x04
    162c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    162e:	8d 81       	ldd	r24, Y+5	; 0x05
    1630:	9e 81       	ldd	r25, Y+6	; 0x06
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	9e 83       	std	Y+6, r25	; 0x06
    1636:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1638:	8d 81       	ldd	r24, Y+5	; 0x05
    163a:	9e 81       	ldd	r25, Y+6	; 0x06
    163c:	00 97       	sbiw	r24, 0x00	; 0
    163e:	69 f7       	brne	.-38     	; 0x161a <pass_init+0x1b6>
    1640:	31 c0       	rjmp	.+98     	; 0x16a4 <pass_init+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1642:	6f 81       	ldd	r22, Y+7	; 0x07
    1644:	78 85       	ldd	r23, Y+8	; 0x08
    1646:	89 85       	ldd	r24, Y+9	; 0x09
    1648:	9a 85       	ldd	r25, Y+10	; 0x0a
    164a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	9e 83       	std	Y+6, r25	; 0x06
    1654:	8d 83       	std	Y+5, r24	; 0x05
    1656:	8d 81       	ldd	r24, Y+5	; 0x05
    1658:	9e 81       	ldd	r25, Y+6	; 0x06
    165a:	9a 83       	std	Y+2, r25	; 0x02
    165c:	89 83       	std	Y+1, r24	; 0x01
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	9a 81       	ldd	r25, Y+2	; 0x02
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	f1 f7       	brne	.-4      	; 0x1662 <pass_init+0x1fe>
    1666:	9a 83       	std	Y+2, r25	; 0x02
    1668:	89 83       	std	Y+1, r24	; 0x01
    166a:	1c c0       	rjmp	.+56     	; 0x16a4 <pass_init+0x240>
			_delay_ms(500);

		}
		else
		{
			g_passInit[i] = l_key;
    166c:	80 91 1f 01 	lds	r24, 0x011F
    1670:	88 2f       	mov	r24, r24
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	fc 01       	movw	r30, r24
    1676:	e0 5f       	subi	r30, 0xF0	; 240
    1678:	fe 4f       	sbci	r31, 0xFE	; 254
    167a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    167c:	80 83       	st	Z, r24

			LCD_moveCursor(1 , i+2);
    167e:	80 91 1f 01 	lds	r24, 0x011F
    1682:	98 2f       	mov	r25, r24
    1684:	9e 5f       	subi	r25, 0xFE	; 254
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	69 2f       	mov	r22, r25
    168a:	0e 94 f6 17 	call	0x2fec	; 0x2fec <LCD_moveCursor>

			LCD_displayStringRowColumn(1 ,(i+2) ,"*" );
    168e:	80 91 1f 01 	lds	r24, 0x011F
    1692:	98 2f       	mov	r25, r24
    1694:	9e 5f       	subi	r25, 0xFE	; 254
    1696:	2a ed       	ldi	r18, 0xDA	; 218
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	69 2f       	mov	r22, r25
    169e:	a9 01       	movw	r20, r18
    16a0:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_displayStringRowColumn>
	uint8 l_key  ;

	LCD_clearScreen();
	LCD_displayString("Enter Pass init:");

	for (i = 0 ; i < SIZE_PASS ; i ++ )
    16a4:	80 91 1f 01 	lds	r24, 0x011F
    16a8:	8f 5f       	subi	r24, 0xFF	; 255
    16aa:	80 93 1f 01 	sts	0x011F, r24
    16ae:	80 91 1f 01 	lds	r24, 0x011F
    16b2:	85 30       	cpi	r24, 0x05	; 5
    16b4:	08 f4       	brcc	.+2      	; 0x16b8 <pass_init+0x254>
    16b6:	e9 ce       	rjmp	.-558    	; 0x148a <pass_init+0x26>
			LCD_displayStringRowColumn(1 ,(i+2) ,"*" );
		}
	}


}
    16b8:	6d 96       	adiw	r28, 0x1d	; 29
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	f8 94       	cli
    16be:	de bf       	out	0x3e, r29	; 62
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	cd bf       	out	0x3d, r28	; 61
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <re_enter>:
uint8 re_enter (void)
{
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	60 97       	sbiw	r28, 0x10	; 16
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	f8 94       	cli
    16d8:	de bf       	out	0x3e, r29	; 62
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	cd bf       	out	0x3d, r28	; 61
	uint8 l_key , l_flagPassInit = MATCHED ;
    16de:	1f 86       	std	Y+15, r1	; 0x0f

	LCD_clearScreen();
    16e0:	0e 94 74 18 	call	0x30e8	; 0x30e8 <LCD_clearScreen>
	LCD_displayString("re-Enter Pass :");
    16e4:	8d ee       	ldi	r24, 0xED	; 237
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_displayString>
	for (i = 0 ; i < SIZE_PASS ; i ++ )
    16ec:	10 92 1f 01 	sts	0x011F, r1
    16f0:	b3 c0       	rjmp	.+358    	; 0x1858 <re_enter+0x18e>
	{
		l_key= KEYPAD_getPressedKey();
    16f2:	0e 94 c8 11 	call	0x2390	; 0x2390 <KEYPAD_getPressedKey>
    16f6:	88 8b       	std	Y+16, r24	; 0x10
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a6 e9       	ldi	r26, 0x96	; 150
    16fe:	b3 e4       	ldi	r27, 0x43	; 67
    1700:	8b 87       	std	Y+11, r24	; 0x0b
    1702:	9c 87       	std	Y+12, r25	; 0x0c
    1704:	ad 87       	std	Y+13, r26	; 0x0d
    1706:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1708:	6b 85       	ldd	r22, Y+11	; 0x0b
    170a:	7c 85       	ldd	r23, Y+12	; 0x0c
    170c:	8d 85       	ldd	r24, Y+13	; 0x0d
    170e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	4a ef       	ldi	r20, 0xFA	; 250
    1716:	54 e4       	ldi	r21, 0x44	; 68
    1718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	8f 83       	std	Y+7, r24	; 0x07
    1722:	98 87       	std	Y+8, r25	; 0x08
    1724:	a9 87       	std	Y+9, r26	; 0x09
    1726:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1728:	6f 81       	ldd	r22, Y+7	; 0x07
    172a:	78 85       	ldd	r23, Y+8	; 0x08
    172c:	89 85       	ldd	r24, Y+9	; 0x09
    172e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	40 e8       	ldi	r20, 0x80	; 128
    1736:	5f e3       	ldi	r21, 0x3F	; 63
    1738:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    173c:	88 23       	and	r24, r24
    173e:	2c f4       	brge	.+10     	; 0x174a <re_enter+0x80>
		__ticks = 1;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	9e 83       	std	Y+6, r25	; 0x06
    1746:	8d 83       	std	Y+5, r24	; 0x05
    1748:	3f c0       	rjmp	.+126    	; 0x17c8 <re_enter+0xfe>
	else if (__tmp > 65535)
    174a:	6f 81       	ldd	r22, Y+7	; 0x07
    174c:	78 85       	ldd	r23, Y+8	; 0x08
    174e:	89 85       	ldd	r24, Y+9	; 0x09
    1750:	9a 85       	ldd	r25, Y+10	; 0x0a
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	3f ef       	ldi	r19, 0xFF	; 255
    1756:	4f e7       	ldi	r20, 0x7F	; 127
    1758:	57 e4       	ldi	r21, 0x47	; 71
    175a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    175e:	18 16       	cp	r1, r24
    1760:	4c f5       	brge	.+82     	; 0x17b4 <re_enter+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1762:	6b 85       	ldd	r22, Y+11	; 0x0b
    1764:	7c 85       	ldd	r23, Y+12	; 0x0c
    1766:	8d 85       	ldd	r24, Y+13	; 0x0d
    1768:	9e 85       	ldd	r25, Y+14	; 0x0e
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e2       	ldi	r20, 0x20	; 32
    1770:	51 e4       	ldi	r21, 0x41	; 65
    1772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	bc 01       	movw	r22, r24
    177c:	cd 01       	movw	r24, r26
    177e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	9e 83       	std	Y+6, r25	; 0x06
    1788:	8d 83       	std	Y+5, r24	; 0x05
    178a:	0f c0       	rjmp	.+30     	; 0x17aa <re_enter+0xe0>
    178c:	88 ec       	ldi	r24, 0xC8	; 200
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	9c 83       	std	Y+4, r25	; 0x04
    1792:	8b 83       	std	Y+3, r24	; 0x03
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	9c 81       	ldd	r25, Y+4	; 0x04
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	f1 f7       	brne	.-4      	; 0x1798 <re_enter+0xce>
    179c:	9c 83       	std	Y+4, r25	; 0x04
    179e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a0:	8d 81       	ldd	r24, Y+5	; 0x05
    17a2:	9e 81       	ldd	r25, Y+6	; 0x06
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	9e 83       	std	Y+6, r25	; 0x06
    17a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17aa:	8d 81       	ldd	r24, Y+5	; 0x05
    17ac:	9e 81       	ldd	r25, Y+6	; 0x06
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	69 f7       	brne	.-38     	; 0x178c <re_enter+0xc2>
    17b2:	14 c0       	rjmp	.+40     	; 0x17dc <re_enter+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b4:	6f 81       	ldd	r22, Y+7	; 0x07
    17b6:	78 85       	ldd	r23, Y+8	; 0x08
    17b8:	89 85       	ldd	r24, Y+9	; 0x09
    17ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    17bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	9e 83       	std	Y+6, r25	; 0x06
    17c6:	8d 83       	std	Y+5, r24	; 0x05
    17c8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ca:	9e 81       	ldd	r25, Y+6	; 0x06
    17cc:	9a 83       	std	Y+2, r25	; 0x02
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	9a 81       	ldd	r25, Y+2	; 0x02
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <re_enter+0x10a>
    17d8:	9a 83       	std	Y+2, r25	; 0x02
    17da:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);

		/*
		 * to make sure input is PIN
		 * */
		if (!((l_key >= 0  ) && (l_key <= 9  )))
    17dc:	88 89       	ldd	r24, Y+16	; 0x10
    17de:	8a 30       	cpi	r24, 0x0A	; 10
    17e0:	30 f0       	brcs	.+12     	; 0x17ee <re_enter+0x124>
		{
			i--;
    17e2:	80 91 1f 01 	lds	r24, 0x011F
    17e6:	81 50       	subi	r24, 0x01	; 1
    17e8:	80 93 1f 01 	sts	0x011F, r24
    17ec:	30 c0       	rjmp	.+96     	; 0x184e <re_enter+0x184>
		}
		else
		{
			g_passcheak[i] = l_key;
    17ee:	80 91 1f 01 	lds	r24, 0x011F
    17f2:	88 2f       	mov	r24, r24
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	fc 01       	movw	r30, r24
    17f8:	eb 5e       	subi	r30, 0xEB	; 235
    17fa:	fe 4f       	sbci	r31, 0xFE	; 254
    17fc:	88 89       	ldd	r24, Y+16	; 0x10
    17fe:	80 83       	st	Z, r24
			LCD_moveCursor(1 , i+2);
    1800:	80 91 1f 01 	lds	r24, 0x011F
    1804:	98 2f       	mov	r25, r24
    1806:	9e 5f       	subi	r25, 0xFE	; 254
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	69 2f       	mov	r22, r25
    180c:	0e 94 f6 17 	call	0x2fec	; 0x2fec <LCD_moveCursor>
			LCD_displayStringRowColumn(1 ,i+2  ,"*" );
    1810:	80 91 1f 01 	lds	r24, 0x011F
    1814:	98 2f       	mov	r25, r24
    1816:	9e 5f       	subi	r25, 0xFE	; 254
    1818:	2a ed       	ldi	r18, 0xDA	; 218
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	69 2f       	mov	r22, r25
    1820:	a9 01       	movw	r20, r18
    1822:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_displayStringRowColumn>
			if (g_passcheak[i] != g_passInit[i])
    1826:	80 91 1f 01 	lds	r24, 0x011F
    182a:	88 2f       	mov	r24, r24
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	fc 01       	movw	r30, r24
    1830:	eb 5e       	subi	r30, 0xEB	; 235
    1832:	fe 4f       	sbci	r31, 0xFE	; 254
    1834:	20 81       	ld	r18, Z
    1836:	80 91 1f 01 	lds	r24, 0x011F
    183a:	88 2f       	mov	r24, r24
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	fc 01       	movw	r30, r24
    1840:	e0 5f       	subi	r30, 0xF0	; 240
    1842:	fe 4f       	sbci	r31, 0xFE	; 254
    1844:	80 81       	ld	r24, Z
    1846:	28 17       	cp	r18, r24
    1848:	11 f0       	breq	.+4      	; 0x184e <re_enter+0x184>
			{
				l_flagPassInit = UNMATCHED;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	8f 87       	std	Y+15, r24	; 0x0f
{
	uint8 l_key , l_flagPassInit = MATCHED ;

	LCD_clearScreen();
	LCD_displayString("re-Enter Pass :");
	for (i = 0 ; i < SIZE_PASS ; i ++ )
    184e:	80 91 1f 01 	lds	r24, 0x011F
    1852:	8f 5f       	subi	r24, 0xFF	; 255
    1854:	80 93 1f 01 	sts	0x011F, r24
    1858:	80 91 1f 01 	lds	r24, 0x011F
    185c:	85 30       	cpi	r24, 0x05	; 5
    185e:	08 f4       	brcc	.+2      	; 0x1862 <re_enter+0x198>
    1860:	48 cf       	rjmp	.-368    	; 0x16f2 <re_enter+0x28>

		}

	}

	return l_flagPassInit;
    1862:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1864:	60 96       	adiw	r28, 0x10	; 16
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	de bf       	out	0x3e, r29	; 62
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	cd bf       	out	0x3d, r28	; 61
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <resevebyte_from_uart>:




uint8 resevebyte_from_uart(void)
{
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	0f 92       	push	r0
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
	uint8 flag_uart_redy = 1 ;
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	06 c0       	rjmp	.+12     	; 0x1892 <resevebyte_from_uart+0x1c>
	while (flag_uart_redy)
	{
		UART_sendByte(UART_IS_REDY);
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <UART_sendByte>
		flag_uart_redy = UART_recieveByte();
    188c:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <UART_recieveByte>
    1890:	89 83       	std	Y+1, r24	; 0x01


uint8 resevebyte_from_uart(void)
{
	uint8 flag_uart_redy = 1 ;
	while (flag_uart_redy)
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	88 23       	and	r24, r24
    1896:	b9 f7       	brne	.-18     	; 0x1886 <resevebyte_from_uart+0x10>
	{
		UART_sendByte(UART_IS_REDY);
		flag_uart_redy = UART_recieveByte();
	}

		return UART_recieveByte();
    1898:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <UART_recieveByte>


}
    189c:	0f 90       	pop	r0
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <send_to_uart>:



void send_to_uart(uint8 data)
{
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	0f 92       	push	r0
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
    18ae:	89 83       	std	Y+1, r24	; 0x01
	while (UART_recieveByte() != UART_IS_REDY);
    18b0:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <UART_recieveByte>
    18b4:	88 23       	and	r24, r24
    18b6:	e1 f7       	brne	.-8      	; 0x18b0 <send_to_uart+0xc>
	UART_sendByte(UART_IS_REDY);
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <UART_sendByte>
	UART_sendByte(data);
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <UART_sendByte>

}
    18c4:	0f 90       	pop	r0
    18c6:	cf 91       	pop	r28
    18c8:	df 91       	pop	r29
    18ca:	08 95       	ret

000018cc <resevePass>:


void resevePass(void)
{
    18cc:	0f 93       	push	r16
    18ce:	1f 93       	push	r17
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	0f 92       	push	r0
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
	uint8 flag_uart_redy = 1 ;
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	89 83       	std	Y+1, r24	; 0x01
    18de:	06 c0       	rjmp	.+12     	; 0x18ec <resevePass+0x20>
	while (flag_uart_redy)
	{
		UART_sendByte(UART_IS_REDY);
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <UART_sendByte>
		flag_uart_redy = UART_recieveByte();
    18e6:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <UART_recieveByte>
    18ea:	89 83       	std	Y+1, r24	; 0x01


void resevePass(void)
{
	uint8 flag_uart_redy = 1 ;
	while (flag_uart_redy)
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	88 23       	and	r24, r24
    18f0:	b9 f7       	brne	.-18     	; 0x18e0 <resevePass+0x14>
	{
		UART_sendByte(UART_IS_REDY);
		flag_uart_redy = UART_recieveByte();
	}
	for (i = 0 ; i < SIZE_PASS ; i ++ )
    18f2:	10 92 1f 01 	sts	0x011F, r1
    18f6:	0f c0       	rjmp	.+30     	; 0x1916 <resevePass+0x4a>
	{
		g_passInit[i] = UART_recieveByte();
    18f8:	80 91 1f 01 	lds	r24, 0x011F
    18fc:	08 2f       	mov	r16, r24
    18fe:	10 e0       	ldi	r17, 0x00	; 0
    1900:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <UART_recieveByte>
    1904:	f8 01       	movw	r30, r16
    1906:	e0 5f       	subi	r30, 0xF0	; 240
    1908:	fe 4f       	sbci	r31, 0xFE	; 254
    190a:	80 83       	st	Z, r24
	while (flag_uart_redy)
	{
		UART_sendByte(UART_IS_REDY);
		flag_uart_redy = UART_recieveByte();
	}
	for (i = 0 ; i < SIZE_PASS ; i ++ )
    190c:	80 91 1f 01 	lds	r24, 0x011F
    1910:	8f 5f       	subi	r24, 0xFF	; 255
    1912:	80 93 1f 01 	sts	0x011F, r24
    1916:	80 91 1f 01 	lds	r24, 0x011F
    191a:	85 30       	cpi	r24, 0x05	; 5
    191c:	68 f3       	brcs	.-38     	; 0x18f8 <resevePass+0x2c>
	{
		g_passInit[i] = UART_recieveByte();
	}


}
    191e:	0f 90       	pop	r0
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	1f 91       	pop	r17
    1926:	0f 91       	pop	r16
    1928:	08 95       	ret

0000192a <sendPass>:

void sendPass(void)
{
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
	while (UART_recieveByte() != UART_IS_REDY);
    1932:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <UART_recieveByte>
    1936:	88 23       	and	r24, r24
    1938:	e1 f7       	brne	.-8      	; 0x1932 <sendPass+0x8>
	UART_sendByte(UART_IS_REDY);
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <UART_sendByte>

	for (i = 0; i < SIZE_PASS ; i ++)
    1940:	10 92 1f 01 	sts	0x011F, r1
    1944:	0f c0       	rjmp	.+30     	; 0x1964 <sendPass+0x3a>
	{
		UART_sendByte(g_passInit[i]);
    1946:	80 91 1f 01 	lds	r24, 0x011F
    194a:	88 2f       	mov	r24, r24
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	fc 01       	movw	r30, r24
    1950:	e0 5f       	subi	r30, 0xF0	; 240
    1952:	fe 4f       	sbci	r31, 0xFE	; 254
    1954:	80 81       	ld	r24, Z
    1956:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <UART_sendByte>
void sendPass(void)
{
	while (UART_recieveByte() != UART_IS_REDY);
	UART_sendByte(UART_IS_REDY);

	for (i = 0; i < SIZE_PASS ; i ++)
    195a:	80 91 1f 01 	lds	r24, 0x011F
    195e:	8f 5f       	subi	r24, 0xFF	; 255
    1960:	80 93 1f 01 	sts	0x011F, r24
    1964:	80 91 1f 01 	lds	r24, 0x011F
    1968:	85 30       	cpi	r24, 0x05	; 5
    196a:	68 f3       	brcs	.-38     	; 0x1946 <sendPass+0x1c>
	{
		UART_sendByte(g_passInit[i]);
	}

}
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <cullBackTimer_1>:


void cullBackTimer_1(void)
{
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    197a:	80 91 20 01 	lds	r24, 0x0120
    197e:	8f 5f       	subi	r24, 0xFF	; 255
    1980:	80 93 20 01 	sts	0x0120, r24
}
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	08 95       	ret

0000198a <__vector_7>:




ISR(TIMER1_COMPA_vect)
{
    198a:	1f 92       	push	r1
    198c:	0f 92       	push	r0
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	0f 92       	push	r0
    1992:	11 24       	eor	r1, r1
    1994:	2f 93       	push	r18
    1996:	3f 93       	push	r19
    1998:	4f 93       	push	r20
    199a:	5f 93       	push	r21
    199c:	6f 93       	push	r22
    199e:	7f 93       	push	r23
    19a0:	8f 93       	push	r24
    19a2:	9f 93       	push	r25
    19a4:	af 93       	push	r26
    19a6:	bf 93       	push	r27
    19a8:	ef 93       	push	r30
    19aa:	ff 93       	push	r31
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    19b4:	80 91 1c 01 	lds	r24, 0x011C
    19b8:	90 91 1d 01 	lds	r25, 0x011D
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	29 f0       	breq	.+10     	; 0x19ca <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    19c0:	e0 91 1c 01 	lds	r30, 0x011C
    19c4:	f0 91 1d 01 	lds	r31, 0x011D
    19c8:	09 95       	icall
	}
}
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	ff 91       	pop	r31
    19d0:	ef 91       	pop	r30
    19d2:	bf 91       	pop	r27
    19d4:	af 91       	pop	r26
    19d6:	9f 91       	pop	r25
    19d8:	8f 91       	pop	r24
    19da:	7f 91       	pop	r23
    19dc:	6f 91       	pop	r22
    19de:	5f 91       	pop	r21
    19e0:	4f 91       	pop	r20
    19e2:	3f 91       	pop	r19
    19e4:	2f 91       	pop	r18
    19e6:	0f 90       	pop	r0
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	0f 90       	pop	r0
    19ec:	1f 90       	pop	r1
    19ee:	18 95       	reti

000019f0 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    19f0:	1f 92       	push	r1
    19f2:	0f 92       	push	r0
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	0f 92       	push	r0
    19f8:	11 24       	eor	r1, r1
    19fa:	2f 93       	push	r18
    19fc:	3f 93       	push	r19
    19fe:	4f 93       	push	r20
    1a00:	5f 93       	push	r21
    1a02:	6f 93       	push	r22
    1a04:	7f 93       	push	r23
    1a06:	8f 93       	push	r24
    1a08:	9f 93       	push	r25
    1a0a:	af 93       	push	r26
    1a0c:	bf 93       	push	r27
    1a0e:	ef 93       	push	r30
    1a10:	ff 93       	push	r31
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1a1a:	80 91 1c 01 	lds	r24, 0x011C
    1a1e:	90 91 1d 01 	lds	r25, 0x011D
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	29 f0       	breq	.+10     	; 0x1a30 <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    1a26:	e0 91 1c 01 	lds	r30, 0x011C
    1a2a:	f0 91 1d 01 	lds	r31, 0x011D
    1a2e:	09 95       	icall
	}
}
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	ff 91       	pop	r31
    1a36:	ef 91       	pop	r30
    1a38:	bf 91       	pop	r27
    1a3a:	af 91       	pop	r26
    1a3c:	9f 91       	pop	r25
    1a3e:	8f 91       	pop	r24
    1a40:	7f 91       	pop	r23
    1a42:	6f 91       	pop	r22
    1a44:	5f 91       	pop	r21
    1a46:	4f 91       	pop	r20
    1a48:	3f 91       	pop	r19
    1a4a:	2f 91       	pop	r18
    1a4c:	0f 90       	pop	r0
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	0f 90       	pop	r0
    1a52:	1f 90       	pop	r1
    1a54:	18 95       	reti

00001a56 <Timer1_init>:



void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	00 d0       	rcall	.+0      	; 0x1a5c <Timer1_init+0x6>
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	9a 83       	std	Y+2, r25	; 0x02
    1a62:	89 83       	std	Y+1, r24	; 0x01

	if (Config_Ptr->mode == NORMAL_MODE)
    1a64:	e9 81       	ldd	r30, Y+1	; 0x01
    1a66:	fa 81       	ldd	r31, Y+2	; 0x02
    1a68:	85 81       	ldd	r24, Z+5	; 0x05
    1a6a:	88 23       	and	r24, r24
    1a6c:	91 f4       	brne	.+36     	; 0x1a92 <Timer1_init+0x3c>
	{

		TIMSK |= (1<<TOIE1);
    1a6e:	a9 e5       	ldi	r26, 0x59	; 89
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	e9 e5       	ldi	r30, 0x59	; 89
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	84 60       	ori	r24, 0x04	; 4
    1a7a:	8c 93       	st	X, r24



		TCCR1A = (1<<FOC1A);
    1a7c:	ef e4       	ldi	r30, 0x4F	; 79
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	88 e0       	ldi	r24, 0x08	; 8
    1a82:	80 83       	st	Z, r24


		TCCR1B = Config_Ptr->prescaler;
    1a84:	ae e4       	ldi	r26, 0x4E	; 78
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	e9 81       	ldd	r30, Y+1	; 0x01
    1a8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a8c:	84 81       	ldd	r24, Z+4	; 0x04
    1a8e:	8c 93       	st	X, r24
    1a90:	1e c0       	rjmp	.+60     	; 0x1ace <Timer1_init+0x78>

	}
	else
	{

		OCR1A = Config_Ptr->compare_value;
    1a92:	aa e4       	ldi	r26, 0x4A	; 74
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e9 81       	ldd	r30, Y+1	; 0x01
    1a98:	fa 81       	ldd	r31, Y+2	; 0x02
    1a9a:	82 81       	ldd	r24, Z+2	; 0x02
    1a9c:	93 81       	ldd	r25, Z+3	; 0x03
    1a9e:	11 96       	adiw	r26, 0x01	; 1
    1aa0:	9c 93       	st	X, r25
    1aa2:	8e 93       	st	-X, r24

		TIMSK |= (1<<OCIE1A);
    1aa4:	a9 e5       	ldi	r26, 0x59	; 89
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e9 e5       	ldi	r30, 0x59	; 89
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	80 61       	ori	r24, 0x10	; 16
    1ab0:	8c 93       	st	X, r24

		TCCR1A = (1<<FOC1A);
    1ab2:	ef e4       	ldi	r30, 0x4F	; 79
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	88 e0       	ldi	r24, 0x08	; 8
    1ab8:	80 83       	st	Z, r24


		TCCR1B = Config_Ptr->prescaler | Config_Ptr->mode;
    1aba:	ae e4       	ldi	r26, 0x4E	; 78
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac2:	94 81       	ldd	r25, Z+4	; 0x04
    1ac4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac8:	85 81       	ldd	r24, Z+5	; 0x05
    1aca:	89 2b       	or	r24, r25
    1acc:	8c 93       	st	X, r24
	}
}
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	cf 91       	pop	r28
    1ad4:	df 91       	pop	r29
    1ad6:	08 95       	ret

00001ad8 <Timer1_deInit>:


void Timer1_deInit(void)
{
    1ad8:	df 93       	push	r29
    1ada:	cf 93       	push	r28
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
	/* stop Timer */
	TCCR1B = (TCCR1B & 0xF8)  | (No_clock);
    1ae0:	ae e4       	ldi	r26, 0x4E	; 78
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	ee e4       	ldi	r30, 0x4E	; 78
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	88 7f       	andi	r24, 0xF8	; 248
    1aec:	8c 93       	st	X, r24
}
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	08 95       	ret

00001af4 <Timer1_setCallBack>:


void Timer1_setCallBack(void(*a_ptr)(void))
{
    1af4:	df 93       	push	r29
    1af6:	cf 93       	push	r28
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <Timer1_setCallBack+0x6>
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	9a 83       	std	Y+2, r25	; 0x02
    1b00:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	9a 81       	ldd	r25, Y+2	; 0x02
    1b06:	90 93 1d 01 	sts	0x011D, r25
    1b0a:	80 93 1c 01 	sts	0x011C, r24
}
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <UART_init>:
 */
#include "UART.h"
#include "avr/io.h"
#include "common_macros.h"
void UART_init(const UART_ConfigType * Config_Ptr)
{
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <UART_init+0x6>
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <UART_init+0x8>
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	9c 83       	std	Y+4, r25	; 0x04
    1b26:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0 ;
    1b28:	1a 82       	std	Y+2, r1	; 0x02
    1b2a:	19 82       	std	Y+1, r1	; 0x01
	UCSRA = (1<<U2X);
    1b2c:	eb e2       	ldi	r30, 0x2B	; 43
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	82 e0       	ldi	r24, 0x02	; 2
    1b32:	80 83       	st	Z, r24


	UCSRB = (1<<RXEN) | (1<<TXEN);
    1b34:	ea e2       	ldi	r30, 0x2A	; 42
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	88 e1       	ldi	r24, 0x18	; 24
    1b3a:	80 83       	st	Z, r24

	UCSRC =  ( 1<<URSEL ) | (Config_Ptr->parity <<UPM0) | (Config_Ptr->stop_bit << 3);
    1b3c:	a0 e4       	ldi	r26, 0x40	; 64
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	eb 81       	ldd	r30, Y+3	; 0x03
    1b42:	fc 81       	ldd	r31, Y+4	; 0x04
    1b44:	81 81       	ldd	r24, Z+1	; 0x01
    1b46:	88 2f       	mov	r24, r24
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	82 95       	swap	r24
    1b4c:	92 95       	swap	r25
    1b4e:	90 7f       	andi	r25, 0xF0	; 240
    1b50:	98 27       	eor	r25, r24
    1b52:	80 7f       	andi	r24, 0xF0	; 240
    1b54:	98 27       	eor	r25, r24
    1b56:	28 2f       	mov	r18, r24
    1b58:	20 68       	ori	r18, 0x80	; 128
    1b5a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b5c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b5e:	82 81       	ldd	r24, Z+2	; 0x02
    1b60:	88 2f       	mov	r24, r24
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	88 0f       	add	r24, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	88 0f       	add	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	82 2b       	or	r24, r18
    1b72:	8c 93       	st	X, r24


	UCSRC = ((UCSRC & 0xF9)| ( (Config_Ptr->bit_data  & 0x3 ) << 1) );
    1b74:	a0 e4       	ldi	r26, 0x40	; 64
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e0 e4       	ldi	r30, 0x40	; 64
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	28 2f       	mov	r18, r24
    1b80:	29 7f       	andi	r18, 0xF9	; 249
    1b82:	eb 81       	ldd	r30, Y+3	; 0x03
    1b84:	fc 81       	ldd	r31, Y+4	; 0x04
    1b86:	80 81       	ld	r24, Z
    1b88:	88 2f       	mov	r24, r24
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	83 70       	andi	r24, 0x03	; 3
    1b8e:	90 70       	andi	r25, 0x00	; 0
    1b90:	88 0f       	add	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	82 2b       	or	r24, r18
    1b96:	8c 93       	st	X, r24

	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    1b98:	eb 81       	ldd	r30, Y+3	; 0x03
    1b9a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b9c:	83 81       	ldd	r24, Z+3	; 0x03
    1b9e:	94 81       	ldd	r25, Z+4	; 0x04
    1ba0:	cc 01       	movw	r24, r24
    1ba2:	a0 e0       	ldi	r26, 0x00	; 0
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	88 0f       	add	r24, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	aa 1f       	adc	r26, r26
    1bac:	bb 1f       	adc	r27, r27
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	aa 1f       	adc	r26, r26
    1bb4:	bb 1f       	adc	r27, r27
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	aa 1f       	adc	r26, r26
    1bbc:	bb 1f       	adc	r27, r27
    1bbe:	9c 01       	movw	r18, r24
    1bc0:	ad 01       	movw	r20, r26
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	92 e1       	ldi	r25, 0x12	; 18
    1bc6:	aa e7       	ldi	r26, 0x7A	; 122
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	bc 01       	movw	r22, r24
    1bcc:	cd 01       	movw	r24, r26
    1bce:	0e 94 7e 18 	call	0x30fc	; 0x30fc <__udivmodsi4>
    1bd2:	da 01       	movw	r26, r20
    1bd4:	c9 01       	movw	r24, r18
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	9a 83       	std	Y+2, r25	; 0x02
    1bda:	89 83       	std	Y+1, r24	; 0x01


	UBRRH = ubrr_value>>8;
    1bdc:	e0 e4       	ldi	r30, 0x40	; 64
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	9a 81       	ldd	r25, Y+2	; 0x02
    1be4:	89 2f       	mov	r24, r25
    1be6:	99 27       	eor	r25, r25
    1be8:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1bea:	e9 e2       	ldi	r30, 0x29	; 41
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	80 83       	st	Z, r24

}
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	0f 92       	push	r0
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1c0c:	eb e2       	ldi	r30, 0x2B	; 43
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	88 2f       	mov	r24, r24
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	80 72       	andi	r24, 0x20	; 32
    1c18:	90 70       	andi	r25, 0x00	; 0
    1c1a:	00 97       	sbiw	r24, 0x00	; 0
    1c1c:	b9 f3       	breq	.-18     	; 0x1c0c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1c1e:	ec e2       	ldi	r30, 0x2C	; 44
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	80 83       	st	Z, r24
}
    1c26:	0f 90       	pop	r0
    1c28:	cf 91       	pop	r28
    1c2a:	df 91       	pop	r29
    1c2c:	08 95       	ret

00001c2e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one
	 * by poling  */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1c36:	eb e2       	ldi	r30, 0x2B	; 43
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	88 23       	and	r24, r24
    1c3e:	dc f7       	brge	.-10     	; 0x1c36 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    1c40:	ec e2       	ldi	r30, 0x2C	; 44
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
}
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	08 95       	ret

00001c4c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <UART_sendString+0x6>
    1c52:	0f 92       	push	r0
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	9b 83       	std	Y+3, r25	; 0x03
    1c5a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;

	/* Send the whole string */
	for(i = 0 ; Str[i] != '\0'; i ++)
    1c5c:	19 82       	std	Y+1, r1	; 0x01
    1c5e:	0e c0       	rjmp	.+28     	; 0x1c7c <UART_sendString+0x30>
	{
		UART_sendByte(Str[i]);
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	9b 81       	ldd	r25, Y+3	; 0x03
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	e2 0f       	add	r30, r18
    1c6e:	f3 1f       	adc	r31, r19
    1c70:	80 81       	ld	r24, Z
    1c72:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <UART_sendByte>
void UART_sendString(const uint8 *Str)
{
	uint8 i;

	/* Send the whole string */
	for(i = 0 ; Str[i] != '\0'; i ++)
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	8f 5f       	subi	r24, 0xFF	; 255
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	28 2f       	mov	r18, r24
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	9b 81       	ldd	r25, Y+3	; 0x03
    1c86:	fc 01       	movw	r30, r24
    1c88:	e2 0f       	add	r30, r18
    1c8a:	f3 1f       	adc	r31, r19
    1c8c:	80 81       	ld	r24, Z
    1c8e:	88 23       	and	r24, r24
    1c90:	39 f7       	brne	.-50     	; 0x1c60 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
	}
}
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str ,uint8 end_of_str )
{
    1c9e:	0f 93       	push	r16
    1ca0:	1f 93       	push	r17
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <UART_receiveString+0xa>
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <UART_receiveString+0xc>
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	9b 83       	std	Y+3, r25	; 0x03
    1cb0:	8a 83       	std	Y+2, r24	; 0x02
    1cb2:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i = 0;
    1cb4:	19 82       	std	Y+1, r1	; 0x01
	for( i = 0 ; Str[i] != end_of_str ;i ++ )
    1cb6:	19 82       	std	Y+1, r1	; 0x01
    1cb8:	0f c0       	rjmp	.+30     	; 0x1cd8 <UART_receiveString+0x3a>
	{
		Str[i] = UART_recieveByte();
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc4:	8c 01       	movw	r16, r24
    1cc6:	02 0f       	add	r16, r18
    1cc8:	13 1f       	adc	r17, r19
    1cca:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <UART_recieveByte>
    1cce:	f8 01       	movw	r30, r16
    1cd0:	80 83       	st	Z, r24
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str ,uint8 end_of_str )
{
	uint8 i = 0;
	for( i = 0 ; Str[i] != end_of_str ;i ++ )
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	8f 5f       	subi	r24, 0xFF	; 255
    1cd6:	89 83       	std	Y+1, r24	; 0x01
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	e2 0f       	add	r30, r18
    1ce6:	f3 1f       	adc	r31, r19
    1ce8:	90 81       	ld	r25, Z
    1cea:	8c 81       	ldd	r24, Y+4	; 0x04
    1cec:	98 17       	cp	r25, r24
    1cee:	29 f7       	brne	.-54     	; 0x1cba <UART_receiveString+0x1c>
	{
		Str[i] = UART_recieveByte();
	}
	/* After receiving the whole string plus the end of str, replace to '\0' */
	Str[i] = '\0';
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	e2 0f       	add	r30, r18
    1cfe:	f3 1f       	adc	r31, r19
    1d00:	10 82       	st	Z, r1

}
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	1f 91       	pop	r17
    1d10:	0f 91       	pop	r16
    1d12:	08 95       	ret

00001d14 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1d14:	df 93       	push	r29
    1d16:	cf 93       	push	r28
    1d18:	00 d0       	rcall	.+0      	; 0x1d1a <GPIO_setupPinDirection+0x6>
    1d1a:	00 d0       	rcall	.+0      	; 0x1d1c <GPIO_setupPinDirection+0x8>
    1d1c:	0f 92       	push	r0
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    1d22:	89 83       	std	Y+1, r24	; 0x01
    1d24:	6a 83       	std	Y+2, r22	; 0x02
    1d26:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d28:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2a:	88 30       	cpi	r24, 0x08	; 8
    1d2c:	08 f0       	brcs	.+2      	; 0x1d30 <GPIO_setupPinDirection+0x1c>
    1d2e:	d5 c0       	rjmp	.+426    	; 0x1eda <GPIO_setupPinDirection+0x1c6>
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	84 30       	cpi	r24, 0x04	; 4
    1d34:	08 f0       	brcs	.+2      	; 0x1d38 <GPIO_setupPinDirection+0x24>
    1d36:	d1 c0       	rjmp	.+418    	; 0x1eda <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	3d 83       	std	Y+5, r19	; 0x05
    1d40:	2c 83       	std	Y+4, r18	; 0x04
    1d42:	8c 81       	ldd	r24, Y+4	; 0x04
    1d44:	9d 81       	ldd	r25, Y+5	; 0x05
    1d46:	81 30       	cpi	r24, 0x01	; 1
    1d48:	91 05       	cpc	r25, r1
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <GPIO_setupPinDirection+0x3a>
    1d4c:	43 c0       	rjmp	.+134    	; 0x1dd4 <GPIO_setupPinDirection+0xc0>
    1d4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d50:	3d 81       	ldd	r19, Y+5	; 0x05
    1d52:	22 30       	cpi	r18, 0x02	; 2
    1d54:	31 05       	cpc	r19, r1
    1d56:	2c f4       	brge	.+10     	; 0x1d62 <GPIO_setupPinDirection+0x4e>
    1d58:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d5c:	00 97       	sbiw	r24, 0x00	; 0
    1d5e:	71 f0       	breq	.+28     	; 0x1d7c <GPIO_setupPinDirection+0x68>
    1d60:	bc c0       	rjmp	.+376    	; 0x1eda <GPIO_setupPinDirection+0x1c6>
    1d62:	2c 81       	ldd	r18, Y+4	; 0x04
    1d64:	3d 81       	ldd	r19, Y+5	; 0x05
    1d66:	22 30       	cpi	r18, 0x02	; 2
    1d68:	31 05       	cpc	r19, r1
    1d6a:	09 f4       	brne	.+2      	; 0x1d6e <GPIO_setupPinDirection+0x5a>
    1d6c:	5f c0       	rjmp	.+190    	; 0x1e2c <GPIO_setupPinDirection+0x118>
    1d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d70:	9d 81       	ldd	r25, Y+5	; 0x05
    1d72:	83 30       	cpi	r24, 0x03	; 3
    1d74:	91 05       	cpc	r25, r1
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <GPIO_setupPinDirection+0x66>
    1d78:	85 c0       	rjmp	.+266    	; 0x1e84 <GPIO_setupPinDirection+0x170>
    1d7a:	af c0       	rjmp	.+350    	; 0x1eda <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	81 30       	cpi	r24, 0x01	; 1
    1d80:	a1 f4       	brne	.+40     	; 0x1daa <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1d82:	aa e3       	ldi	r26, 0x3A	; 58
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	ea e3       	ldi	r30, 0x3A	; 58
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	48 2f       	mov	r20, r24
    1d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	02 2e       	mov	r0, r18
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <GPIO_setupPinDirection+0x8c>
    1d9c:	88 0f       	add	r24, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	0a 94       	dec	r0
    1da2:	e2 f7       	brpl	.-8      	; 0x1d9c <GPIO_setupPinDirection+0x88>
    1da4:	84 2b       	or	r24, r20
    1da6:	8c 93       	st	X, r24
    1da8:	98 c0       	rjmp	.+304    	; 0x1eda <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1daa:	aa e3       	ldi	r26, 0x3A	; 58
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	ea e3       	ldi	r30, 0x3A	; 58
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	48 2f       	mov	r20, r24
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	28 2f       	mov	r18, r24
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	02 2e       	mov	r0, r18
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <GPIO_setupPinDirection+0xb4>
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	0a 94       	dec	r0
    1dca:	e2 f7       	brpl	.-8      	; 0x1dc4 <GPIO_setupPinDirection+0xb0>
    1dcc:	80 95       	com	r24
    1dce:	84 23       	and	r24, r20
    1dd0:	8c 93       	st	X, r24
    1dd2:	83 c0       	rjmp	.+262    	; 0x1eda <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	81 30       	cpi	r24, 0x01	; 1
    1dd8:	a1 f4       	brne	.+40     	; 0x1e02 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1dda:	a7 e3       	ldi	r26, 0x37	; 55
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e7 e3       	ldi	r30, 0x37	; 55
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	48 2f       	mov	r20, r24
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	02 2e       	mov	r0, r18
    1df2:	02 c0       	rjmp	.+4      	; 0x1df8 <GPIO_setupPinDirection+0xe4>
    1df4:	88 0f       	add	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	0a 94       	dec	r0
    1dfa:	e2 f7       	brpl	.-8      	; 0x1df4 <GPIO_setupPinDirection+0xe0>
    1dfc:	84 2b       	or	r24, r20
    1dfe:	8c 93       	st	X, r24
    1e00:	6c c0       	rjmp	.+216    	; 0x1eda <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1e02:	a7 e3       	ldi	r26, 0x37	; 55
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	e7 e3       	ldi	r30, 0x37	; 55
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	48 2f       	mov	r20, r24
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	28 2f       	mov	r18, r24
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	02 2e       	mov	r0, r18
    1e1a:	02 c0       	rjmp	.+4      	; 0x1e20 <GPIO_setupPinDirection+0x10c>
    1e1c:	88 0f       	add	r24, r24
    1e1e:	99 1f       	adc	r25, r25
    1e20:	0a 94       	dec	r0
    1e22:	e2 f7       	brpl	.-8      	; 0x1e1c <GPIO_setupPinDirection+0x108>
    1e24:	80 95       	com	r24
    1e26:	84 23       	and	r24, r20
    1e28:	8c 93       	st	X, r24
    1e2a:	57 c0       	rjmp	.+174    	; 0x1eda <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	81 30       	cpi	r24, 0x01	; 1
    1e30:	a1 f4       	brne	.+40     	; 0x1e5a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1e32:	a4 e3       	ldi	r26, 0x34	; 52
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e4 e3       	ldi	r30, 0x34	; 52
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	48 2f       	mov	r20, r24
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	02 2e       	mov	r0, r18
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <GPIO_setupPinDirection+0x13c>
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	0a 94       	dec	r0
    1e52:	e2 f7       	brpl	.-8      	; 0x1e4c <GPIO_setupPinDirection+0x138>
    1e54:	84 2b       	or	r24, r20
    1e56:	8c 93       	st	X, r24
    1e58:	40 c0       	rjmp	.+128    	; 0x1eda <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1e5a:	a4 e3       	ldi	r26, 0x34	; 52
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e4 e3       	ldi	r30, 0x34	; 52
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	48 2f       	mov	r20, r24
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	28 2f       	mov	r18, r24
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	02 2e       	mov	r0, r18
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <GPIO_setupPinDirection+0x164>
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	0a 94       	dec	r0
    1e7a:	e2 f7       	brpl	.-8      	; 0x1e74 <GPIO_setupPinDirection+0x160>
    1e7c:	80 95       	com	r24
    1e7e:	84 23       	and	r24, r20
    1e80:	8c 93       	st	X, r24
    1e82:	2b c0       	rjmp	.+86     	; 0x1eda <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1e84:	8b 81       	ldd	r24, Y+3	; 0x03
    1e86:	81 30       	cpi	r24, 0x01	; 1
    1e88:	a1 f4       	brne	.+40     	; 0x1eb2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1e8a:	a1 e3       	ldi	r26, 0x31	; 49
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	e1 e3       	ldi	r30, 0x31	; 49
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	48 2f       	mov	r20, r24
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	02 2e       	mov	r0, r18
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <GPIO_setupPinDirection+0x194>
    1ea4:	88 0f       	add	r24, r24
    1ea6:	99 1f       	adc	r25, r25
    1ea8:	0a 94       	dec	r0
    1eaa:	e2 f7       	brpl	.-8      	; 0x1ea4 <GPIO_setupPinDirection+0x190>
    1eac:	84 2b       	or	r24, r20
    1eae:	8c 93       	st	X, r24
    1eb0:	14 c0       	rjmp	.+40     	; 0x1eda <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1eb2:	a1 e3       	ldi	r26, 0x31	; 49
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e1 e3       	ldi	r30, 0x31	; 49
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	48 2f       	mov	r20, r24
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	02 2e       	mov	r0, r18
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <GPIO_setupPinDirection+0x1bc>
    1ecc:	88 0f       	add	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	0a 94       	dec	r0
    1ed2:	e2 f7       	brpl	.-8      	; 0x1ecc <GPIO_setupPinDirection+0x1b8>
    1ed4:	80 95       	com	r24
    1ed6:	84 23       	and	r24, r20
    1ed8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	cf 91       	pop	r28
    1ee6:	df 91       	pop	r29
    1ee8:	08 95       	ret

00001eea <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1eea:	df 93       	push	r29
    1eec:	cf 93       	push	r28
    1eee:	00 d0       	rcall	.+0      	; 0x1ef0 <GPIO_writePin+0x6>
    1ef0:	00 d0       	rcall	.+0      	; 0x1ef2 <GPIO_writePin+0x8>
    1ef2:	0f 92       	push	r0
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
    1ef8:	89 83       	std	Y+1, r24	; 0x01
    1efa:	6a 83       	std	Y+2, r22	; 0x02
    1efc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	88 30       	cpi	r24, 0x08	; 8
    1f02:	08 f0       	brcs	.+2      	; 0x1f06 <GPIO_writePin+0x1c>
    1f04:	d5 c0       	rjmp	.+426    	; 0x20b0 <GPIO_writePin+0x1c6>
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	84 30       	cpi	r24, 0x04	; 4
    1f0a:	08 f0       	brcs	.+2      	; 0x1f0e <GPIO_writePin+0x24>
    1f0c:	d1 c0       	rjmp	.+418    	; 0x20b0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	3d 83       	std	Y+5, r19	; 0x05
    1f16:	2c 83       	std	Y+4, r18	; 0x04
    1f18:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1c:	81 30       	cpi	r24, 0x01	; 1
    1f1e:	91 05       	cpc	r25, r1
    1f20:	09 f4       	brne	.+2      	; 0x1f24 <GPIO_writePin+0x3a>
    1f22:	43 c0       	rjmp	.+134    	; 0x1faa <GPIO_writePin+0xc0>
    1f24:	2c 81       	ldd	r18, Y+4	; 0x04
    1f26:	3d 81       	ldd	r19, Y+5	; 0x05
    1f28:	22 30       	cpi	r18, 0x02	; 2
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	2c f4       	brge	.+10     	; 0x1f38 <GPIO_writePin+0x4e>
    1f2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f30:	9d 81       	ldd	r25, Y+5	; 0x05
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	71 f0       	breq	.+28     	; 0x1f52 <GPIO_writePin+0x68>
    1f36:	bc c0       	rjmp	.+376    	; 0x20b0 <GPIO_writePin+0x1c6>
    1f38:	2c 81       	ldd	r18, Y+4	; 0x04
    1f3a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f3c:	22 30       	cpi	r18, 0x02	; 2
    1f3e:	31 05       	cpc	r19, r1
    1f40:	09 f4       	brne	.+2      	; 0x1f44 <GPIO_writePin+0x5a>
    1f42:	5f c0       	rjmp	.+190    	; 0x2002 <GPIO_writePin+0x118>
    1f44:	8c 81       	ldd	r24, Y+4	; 0x04
    1f46:	9d 81       	ldd	r25, Y+5	; 0x05
    1f48:	83 30       	cpi	r24, 0x03	; 3
    1f4a:	91 05       	cpc	r25, r1
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <GPIO_writePin+0x66>
    1f4e:	85 c0       	rjmp	.+266    	; 0x205a <GPIO_writePin+0x170>
    1f50:	af c0       	rjmp	.+350    	; 0x20b0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1f52:	8b 81       	ldd	r24, Y+3	; 0x03
    1f54:	81 30       	cpi	r24, 0x01	; 1
    1f56:	a1 f4       	brne	.+40     	; 0x1f80 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1f58:	ab e3       	ldi	r26, 0x3B	; 59
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	eb e3       	ldi	r30, 0x3B	; 59
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	48 2f       	mov	r20, r24
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	02 2e       	mov	r0, r18
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <GPIO_writePin+0x8c>
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	0a 94       	dec	r0
    1f78:	e2 f7       	brpl	.-8      	; 0x1f72 <GPIO_writePin+0x88>
    1f7a:	84 2b       	or	r24, r20
    1f7c:	8c 93       	st	X, r24
    1f7e:	98 c0       	rjmp	.+304    	; 0x20b0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1f80:	ab e3       	ldi	r26, 0x3B	; 59
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	eb e3       	ldi	r30, 0x3B	; 59
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	48 2f       	mov	r20, r24
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	28 2f       	mov	r18, r24
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	02 2e       	mov	r0, r18
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <GPIO_writePin+0xb4>
    1f9a:	88 0f       	add	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	0a 94       	dec	r0
    1fa0:	e2 f7       	brpl	.-8      	; 0x1f9a <GPIO_writePin+0xb0>
    1fa2:	80 95       	com	r24
    1fa4:	84 23       	and	r24, r20
    1fa6:	8c 93       	st	X, r24
    1fa8:	83 c0       	rjmp	.+262    	; 0x20b0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	81 30       	cpi	r24, 0x01	; 1
    1fae:	a1 f4       	brne	.+40     	; 0x1fd8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1fb0:	a8 e3       	ldi	r26, 0x38	; 56
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e8 e3       	ldi	r30, 0x38	; 56
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	48 2f       	mov	r20, r24
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	02 2e       	mov	r0, r18
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <GPIO_writePin+0xe4>
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	0a 94       	dec	r0
    1fd0:	e2 f7       	brpl	.-8      	; 0x1fca <GPIO_writePin+0xe0>
    1fd2:	84 2b       	or	r24, r20
    1fd4:	8c 93       	st	X, r24
    1fd6:	6c c0       	rjmp	.+216    	; 0x20b0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1fd8:	a8 e3       	ldi	r26, 0x38	; 56
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e8 e3       	ldi	r30, 0x38	; 56
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	48 2f       	mov	r20, r24
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	02 2e       	mov	r0, r18
    1ff0:	02 c0       	rjmp	.+4      	; 0x1ff6 <GPIO_writePin+0x10c>
    1ff2:	88 0f       	add	r24, r24
    1ff4:	99 1f       	adc	r25, r25
    1ff6:	0a 94       	dec	r0
    1ff8:	e2 f7       	brpl	.-8      	; 0x1ff2 <GPIO_writePin+0x108>
    1ffa:	80 95       	com	r24
    1ffc:	84 23       	and	r24, r20
    1ffe:	8c 93       	st	X, r24
    2000:	57 c0       	rjmp	.+174    	; 0x20b0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	81 30       	cpi	r24, 0x01	; 1
    2006:	a1 f4       	brne	.+40     	; 0x2030 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2008:	a5 e3       	ldi	r26, 0x35	; 53
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	e5 e3       	ldi	r30, 0x35	; 53
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	80 81       	ld	r24, Z
    2012:	48 2f       	mov	r20, r24
    2014:	8a 81       	ldd	r24, Y+2	; 0x02
    2016:	28 2f       	mov	r18, r24
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	02 2e       	mov	r0, r18
    2020:	02 c0       	rjmp	.+4      	; 0x2026 <GPIO_writePin+0x13c>
    2022:	88 0f       	add	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	0a 94       	dec	r0
    2028:	e2 f7       	brpl	.-8      	; 0x2022 <GPIO_writePin+0x138>
    202a:	84 2b       	or	r24, r20
    202c:	8c 93       	st	X, r24
    202e:	40 c0       	rjmp	.+128    	; 0x20b0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2030:	a5 e3       	ldi	r26, 0x35	; 53
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	e5 e3       	ldi	r30, 0x35	; 53
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	48 2f       	mov	r20, r24
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	28 2f       	mov	r18, r24
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	02 2e       	mov	r0, r18
    2048:	02 c0       	rjmp	.+4      	; 0x204e <GPIO_writePin+0x164>
    204a:	88 0f       	add	r24, r24
    204c:	99 1f       	adc	r25, r25
    204e:	0a 94       	dec	r0
    2050:	e2 f7       	brpl	.-8      	; 0x204a <GPIO_writePin+0x160>
    2052:	80 95       	com	r24
    2054:	84 23       	and	r24, r20
    2056:	8c 93       	st	X, r24
    2058:	2b c0       	rjmp	.+86     	; 0x20b0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	81 30       	cpi	r24, 0x01	; 1
    205e:	a1 f4       	brne	.+40     	; 0x2088 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2060:	a2 e3       	ldi	r26, 0x32	; 50
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	e2 e3       	ldi	r30, 0x32	; 50
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	48 2f       	mov	r20, r24
    206c:	8a 81       	ldd	r24, Y+2	; 0x02
    206e:	28 2f       	mov	r18, r24
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	02 2e       	mov	r0, r18
    2078:	02 c0       	rjmp	.+4      	; 0x207e <GPIO_writePin+0x194>
    207a:	88 0f       	add	r24, r24
    207c:	99 1f       	adc	r25, r25
    207e:	0a 94       	dec	r0
    2080:	e2 f7       	brpl	.-8      	; 0x207a <GPIO_writePin+0x190>
    2082:	84 2b       	or	r24, r20
    2084:	8c 93       	st	X, r24
    2086:	14 c0       	rjmp	.+40     	; 0x20b0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2088:	a2 e3       	ldi	r26, 0x32	; 50
    208a:	b0 e0       	ldi	r27, 0x00	; 0
    208c:	e2 e3       	ldi	r30, 0x32	; 50
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	48 2f       	mov	r20, r24
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	28 2f       	mov	r18, r24
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	02 2e       	mov	r0, r18
    20a0:	02 c0       	rjmp	.+4      	; 0x20a6 <GPIO_writePin+0x1bc>
    20a2:	88 0f       	add	r24, r24
    20a4:	99 1f       	adc	r25, r25
    20a6:	0a 94       	dec	r0
    20a8:	e2 f7       	brpl	.-8      	; 0x20a2 <GPIO_writePin+0x1b8>
    20aa:	80 95       	com	r24
    20ac:	84 23       	and	r24, r20
    20ae:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	0f 90       	pop	r0
    20ba:	cf 91       	pop	r28
    20bc:	df 91       	pop	r29
    20be:	08 95       	ret

000020c0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	00 d0       	rcall	.+0      	; 0x20c6 <GPIO_readPin+0x6>
    20c6:	00 d0       	rcall	.+0      	; 0x20c8 <GPIO_readPin+0x8>
    20c8:	0f 92       	push	r0
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	8a 83       	std	Y+2, r24	; 0x02
    20d0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    20d2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	88 30       	cpi	r24, 0x08	; 8
    20d8:	08 f0       	brcs	.+2      	; 0x20dc <GPIO_readPin+0x1c>
    20da:	84 c0       	rjmp	.+264    	; 0x21e4 <GPIO_readPin+0x124>
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	84 30       	cpi	r24, 0x04	; 4
    20e0:	08 f0       	brcs	.+2      	; 0x20e4 <GPIO_readPin+0x24>
    20e2:	80 c0       	rjmp	.+256    	; 0x21e4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    20e4:	8a 81       	ldd	r24, Y+2	; 0x02
    20e6:	28 2f       	mov	r18, r24
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	3d 83       	std	Y+5, r19	; 0x05
    20ec:	2c 83       	std	Y+4, r18	; 0x04
    20ee:	4c 81       	ldd	r20, Y+4	; 0x04
    20f0:	5d 81       	ldd	r21, Y+5	; 0x05
    20f2:	41 30       	cpi	r20, 0x01	; 1
    20f4:	51 05       	cpc	r21, r1
    20f6:	79 f1       	breq	.+94     	; 0x2156 <GPIO_readPin+0x96>
    20f8:	8c 81       	ldd	r24, Y+4	; 0x04
    20fa:	9d 81       	ldd	r25, Y+5	; 0x05
    20fc:	82 30       	cpi	r24, 0x02	; 2
    20fe:	91 05       	cpc	r25, r1
    2100:	34 f4       	brge	.+12     	; 0x210e <GPIO_readPin+0x4e>
    2102:	2c 81       	ldd	r18, Y+4	; 0x04
    2104:	3d 81       	ldd	r19, Y+5	; 0x05
    2106:	21 15       	cp	r18, r1
    2108:	31 05       	cpc	r19, r1
    210a:	69 f0       	breq	.+26     	; 0x2126 <GPIO_readPin+0x66>
    210c:	6b c0       	rjmp	.+214    	; 0x21e4 <GPIO_readPin+0x124>
    210e:	4c 81       	ldd	r20, Y+4	; 0x04
    2110:	5d 81       	ldd	r21, Y+5	; 0x05
    2112:	42 30       	cpi	r20, 0x02	; 2
    2114:	51 05       	cpc	r21, r1
    2116:	b9 f1       	breq	.+110    	; 0x2186 <GPIO_readPin+0xc6>
    2118:	8c 81       	ldd	r24, Y+4	; 0x04
    211a:	9d 81       	ldd	r25, Y+5	; 0x05
    211c:	83 30       	cpi	r24, 0x03	; 3
    211e:	91 05       	cpc	r25, r1
    2120:	09 f4       	brne	.+2      	; 0x2124 <GPIO_readPin+0x64>
    2122:	49 c0       	rjmp	.+146    	; 0x21b6 <GPIO_readPin+0xf6>
    2124:	5f c0       	rjmp	.+190    	; 0x21e4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2126:	e9 e3       	ldi	r30, 0x39	; 57
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	28 2f       	mov	r18, r24
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	88 2f       	mov	r24, r24
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	a9 01       	movw	r20, r18
    2138:	02 c0       	rjmp	.+4      	; 0x213e <GPIO_readPin+0x7e>
    213a:	55 95       	asr	r21
    213c:	47 95       	ror	r20
    213e:	8a 95       	dec	r24
    2140:	e2 f7       	brpl	.-8      	; 0x213a <GPIO_readPin+0x7a>
    2142:	ca 01       	movw	r24, r20
    2144:	81 70       	andi	r24, 0x01	; 1
    2146:	90 70       	andi	r25, 0x00	; 0
    2148:	88 23       	and	r24, r24
    214a:	19 f0       	breq	.+6      	; 0x2152 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	89 83       	std	Y+1, r24	; 0x01
    2150:	49 c0       	rjmp	.+146    	; 0x21e4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2152:	19 82       	std	Y+1, r1	; 0x01
    2154:	47 c0       	rjmp	.+142    	; 0x21e4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2156:	e6 e3       	ldi	r30, 0x36	; 54
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	28 2f       	mov	r18, r24
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	8b 81       	ldd	r24, Y+3	; 0x03
    2162:	88 2f       	mov	r24, r24
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	a9 01       	movw	r20, r18
    2168:	02 c0       	rjmp	.+4      	; 0x216e <GPIO_readPin+0xae>
    216a:	55 95       	asr	r21
    216c:	47 95       	ror	r20
    216e:	8a 95       	dec	r24
    2170:	e2 f7       	brpl	.-8      	; 0x216a <GPIO_readPin+0xaa>
    2172:	ca 01       	movw	r24, r20
    2174:	81 70       	andi	r24, 0x01	; 1
    2176:	90 70       	andi	r25, 0x00	; 0
    2178:	88 23       	and	r24, r24
    217a:	19 f0       	breq	.+6      	; 0x2182 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	89 83       	std	Y+1, r24	; 0x01
    2180:	31 c0       	rjmp	.+98     	; 0x21e4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2182:	19 82       	std	Y+1, r1	; 0x01
    2184:	2f c0       	rjmp	.+94     	; 0x21e4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2186:	e3 e3       	ldi	r30, 0x33	; 51
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	28 2f       	mov	r18, r24
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	8b 81       	ldd	r24, Y+3	; 0x03
    2192:	88 2f       	mov	r24, r24
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	a9 01       	movw	r20, r18
    2198:	02 c0       	rjmp	.+4      	; 0x219e <GPIO_readPin+0xde>
    219a:	55 95       	asr	r21
    219c:	47 95       	ror	r20
    219e:	8a 95       	dec	r24
    21a0:	e2 f7       	brpl	.-8      	; 0x219a <GPIO_readPin+0xda>
    21a2:	ca 01       	movw	r24, r20
    21a4:	81 70       	andi	r24, 0x01	; 1
    21a6:	90 70       	andi	r25, 0x00	; 0
    21a8:	88 23       	and	r24, r24
    21aa:	19 f0       	breq	.+6      	; 0x21b2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	89 83       	std	Y+1, r24	; 0x01
    21b0:	19 c0       	rjmp	.+50     	; 0x21e4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    21b2:	19 82       	std	Y+1, r1	; 0x01
    21b4:	17 c0       	rjmp	.+46     	; 0x21e4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    21b6:	e0 e3       	ldi	r30, 0x30	; 48
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	28 2f       	mov	r18, r24
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	8b 81       	ldd	r24, Y+3	; 0x03
    21c2:	88 2f       	mov	r24, r24
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	a9 01       	movw	r20, r18
    21c8:	02 c0       	rjmp	.+4      	; 0x21ce <GPIO_readPin+0x10e>
    21ca:	55 95       	asr	r21
    21cc:	47 95       	ror	r20
    21ce:	8a 95       	dec	r24
    21d0:	e2 f7       	brpl	.-8      	; 0x21ca <GPIO_readPin+0x10a>
    21d2:	ca 01       	movw	r24, r20
    21d4:	81 70       	andi	r24, 0x01	; 1
    21d6:	90 70       	andi	r25, 0x00	; 0
    21d8:	88 23       	and	r24, r24
    21da:	19 f0       	breq	.+6      	; 0x21e2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	89 83       	std	Y+1, r24	; 0x01
    21e0:	01 c0       	rjmp	.+2      	; 0x21e4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    21e2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	cf 91       	pop	r28
    21f2:	df 91       	pop	r29
    21f4:	08 95       	ret

000021f6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	00 d0       	rcall	.+0      	; 0x21fc <GPIO_setupPortDirection+0x6>
    21fc:	00 d0       	rcall	.+0      	; 0x21fe <GPIO_setupPortDirection+0x8>
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62
    2202:	89 83       	std	Y+1, r24	; 0x01
    2204:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	84 30       	cpi	r24, 0x04	; 4
    220a:	90 f5       	brcc	.+100    	; 0x2270 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	28 2f       	mov	r18, r24
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	3c 83       	std	Y+4, r19	; 0x04
    2214:	2b 83       	std	Y+3, r18	; 0x03
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	9c 81       	ldd	r25, Y+4	; 0x04
    221a:	81 30       	cpi	r24, 0x01	; 1
    221c:	91 05       	cpc	r25, r1
    221e:	d1 f0       	breq	.+52     	; 0x2254 <GPIO_setupPortDirection+0x5e>
    2220:	2b 81       	ldd	r18, Y+3	; 0x03
    2222:	3c 81       	ldd	r19, Y+4	; 0x04
    2224:	22 30       	cpi	r18, 0x02	; 2
    2226:	31 05       	cpc	r19, r1
    2228:	2c f4       	brge	.+10     	; 0x2234 <GPIO_setupPortDirection+0x3e>
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	00 97       	sbiw	r24, 0x00	; 0
    2230:	61 f0       	breq	.+24     	; 0x224a <GPIO_setupPortDirection+0x54>
    2232:	1e c0       	rjmp	.+60     	; 0x2270 <GPIO_setupPortDirection+0x7a>
    2234:	2b 81       	ldd	r18, Y+3	; 0x03
    2236:	3c 81       	ldd	r19, Y+4	; 0x04
    2238:	22 30       	cpi	r18, 0x02	; 2
    223a:	31 05       	cpc	r19, r1
    223c:	81 f0       	breq	.+32     	; 0x225e <GPIO_setupPortDirection+0x68>
    223e:	8b 81       	ldd	r24, Y+3	; 0x03
    2240:	9c 81       	ldd	r25, Y+4	; 0x04
    2242:	83 30       	cpi	r24, 0x03	; 3
    2244:	91 05       	cpc	r25, r1
    2246:	81 f0       	breq	.+32     	; 0x2268 <GPIO_setupPortDirection+0x72>
    2248:	13 c0       	rjmp	.+38     	; 0x2270 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    224a:	ea e3       	ldi	r30, 0x3A	; 58
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	8a 81       	ldd	r24, Y+2	; 0x02
    2250:	80 83       	st	Z, r24
    2252:	0e c0       	rjmp	.+28     	; 0x2270 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2254:	e7 e3       	ldi	r30, 0x37	; 55
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	8a 81       	ldd	r24, Y+2	; 0x02
    225a:	80 83       	st	Z, r24
    225c:	09 c0       	rjmp	.+18     	; 0x2270 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    225e:	e4 e3       	ldi	r30, 0x34	; 52
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	8a 81       	ldd	r24, Y+2	; 0x02
    2264:	80 83       	st	Z, r24
    2266:	04 c0       	rjmp	.+8      	; 0x2270 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2268:	e1 e3       	ldi	r30, 0x31	; 49
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	80 83       	st	Z, r24
			break;
		}
	}
}
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	cf 91       	pop	r28
    227a:	df 91       	pop	r29
    227c:	08 95       	ret

0000227e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    227e:	df 93       	push	r29
    2280:	cf 93       	push	r28
    2282:	00 d0       	rcall	.+0      	; 0x2284 <GPIO_writePort+0x6>
    2284:	00 d0       	rcall	.+0      	; 0x2286 <GPIO_writePort+0x8>
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    228a:	89 83       	std	Y+1, r24	; 0x01
    228c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	84 30       	cpi	r24, 0x04	; 4
    2292:	90 f5       	brcc	.+100    	; 0x22f8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	28 2f       	mov	r18, r24
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	3c 83       	std	Y+4, r19	; 0x04
    229c:	2b 83       	std	Y+3, r18	; 0x03
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
    22a0:	9c 81       	ldd	r25, Y+4	; 0x04
    22a2:	81 30       	cpi	r24, 0x01	; 1
    22a4:	91 05       	cpc	r25, r1
    22a6:	d1 f0       	breq	.+52     	; 0x22dc <GPIO_writePort+0x5e>
    22a8:	2b 81       	ldd	r18, Y+3	; 0x03
    22aa:	3c 81       	ldd	r19, Y+4	; 0x04
    22ac:	22 30       	cpi	r18, 0x02	; 2
    22ae:	31 05       	cpc	r19, r1
    22b0:	2c f4       	brge	.+10     	; 0x22bc <GPIO_writePort+0x3e>
    22b2:	8b 81       	ldd	r24, Y+3	; 0x03
    22b4:	9c 81       	ldd	r25, Y+4	; 0x04
    22b6:	00 97       	sbiw	r24, 0x00	; 0
    22b8:	61 f0       	breq	.+24     	; 0x22d2 <GPIO_writePort+0x54>
    22ba:	1e c0       	rjmp	.+60     	; 0x22f8 <GPIO_writePort+0x7a>
    22bc:	2b 81       	ldd	r18, Y+3	; 0x03
    22be:	3c 81       	ldd	r19, Y+4	; 0x04
    22c0:	22 30       	cpi	r18, 0x02	; 2
    22c2:	31 05       	cpc	r19, r1
    22c4:	81 f0       	breq	.+32     	; 0x22e6 <GPIO_writePort+0x68>
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ca:	83 30       	cpi	r24, 0x03	; 3
    22cc:	91 05       	cpc	r25, r1
    22ce:	81 f0       	breq	.+32     	; 0x22f0 <GPIO_writePort+0x72>
    22d0:	13 c0       	rjmp	.+38     	; 0x22f8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    22d2:	eb e3       	ldi	r30, 0x3B	; 59
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	8a 81       	ldd	r24, Y+2	; 0x02
    22d8:	80 83       	st	Z, r24
    22da:	0e c0       	rjmp	.+28     	; 0x22f8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    22dc:	e8 e3       	ldi	r30, 0x38	; 56
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	80 83       	st	Z, r24
    22e4:	09 c0       	rjmp	.+18     	; 0x22f8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    22e6:	e5 e3       	ldi	r30, 0x35	; 53
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	8a 81       	ldd	r24, Y+2	; 0x02
    22ec:	80 83       	st	Z, r24
    22ee:	04 c0       	rjmp	.+8      	; 0x22f8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    22f0:	e2 e3       	ldi	r30, 0x32	; 50
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	80 83       	st	Z, r24
			break;
		}
	}
}
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	cf 91       	pop	r28
    2302:	df 91       	pop	r29
    2304:	08 95       	ret

00002306 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2306:	df 93       	push	r29
    2308:	cf 93       	push	r28
    230a:	00 d0       	rcall	.+0      	; 0x230c <GPIO_readPort+0x6>
    230c:	00 d0       	rcall	.+0      	; 0x230e <GPIO_readPort+0x8>
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    2312:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2314:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	84 30       	cpi	r24, 0x04	; 4
    231a:	90 f5       	brcc	.+100    	; 0x2380 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	28 2f       	mov	r18, r24
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	3c 83       	std	Y+4, r19	; 0x04
    2324:	2b 83       	std	Y+3, r18	; 0x03
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	9c 81       	ldd	r25, Y+4	; 0x04
    232a:	81 30       	cpi	r24, 0x01	; 1
    232c:	91 05       	cpc	r25, r1
    232e:	d1 f0       	breq	.+52     	; 0x2364 <GPIO_readPort+0x5e>
    2330:	2b 81       	ldd	r18, Y+3	; 0x03
    2332:	3c 81       	ldd	r19, Y+4	; 0x04
    2334:	22 30       	cpi	r18, 0x02	; 2
    2336:	31 05       	cpc	r19, r1
    2338:	2c f4       	brge	.+10     	; 0x2344 <GPIO_readPort+0x3e>
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	9c 81       	ldd	r25, Y+4	; 0x04
    233e:	00 97       	sbiw	r24, 0x00	; 0
    2340:	61 f0       	breq	.+24     	; 0x235a <GPIO_readPort+0x54>
    2342:	1e c0       	rjmp	.+60     	; 0x2380 <GPIO_readPort+0x7a>
    2344:	2b 81       	ldd	r18, Y+3	; 0x03
    2346:	3c 81       	ldd	r19, Y+4	; 0x04
    2348:	22 30       	cpi	r18, 0x02	; 2
    234a:	31 05       	cpc	r19, r1
    234c:	81 f0       	breq	.+32     	; 0x236e <GPIO_readPort+0x68>
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	9c 81       	ldd	r25, Y+4	; 0x04
    2352:	83 30       	cpi	r24, 0x03	; 3
    2354:	91 05       	cpc	r25, r1
    2356:	81 f0       	breq	.+32     	; 0x2378 <GPIO_readPort+0x72>
    2358:	13 c0       	rjmp	.+38     	; 0x2380 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    235a:	e9 e3       	ldi	r30, 0x39	; 57
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	89 83       	std	Y+1, r24	; 0x01
    2362:	0e c0       	rjmp	.+28     	; 0x2380 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2364:	e6 e3       	ldi	r30, 0x36	; 54
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	89 83       	std	Y+1, r24	; 0x01
    236c:	09 c0       	rjmp	.+18     	; 0x2380 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    236e:	e3 e3       	ldi	r30, 0x33	; 51
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	89 83       	std	Y+1, r24	; 0x01
    2376:	04 c0       	rjmp	.+8      	; 0x2380 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2378:	e0 e3       	ldi	r30, 0x30	; 48
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2380:	89 81       	ldd	r24, Y+1	; 0x01
}
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	cf 91       	pop	r28
    238c:	df 91       	pop	r29
    238e:	08 95       	ret

00002390 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2390:	df 93       	push	r29
    2392:	cf 93       	push	r28
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
    2398:	60 97       	sbiw	r28, 0x10	; 16
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	de bf       	out	0x3e, r29	; 62
    23a0:	0f be       	out	0x3f, r0	; 63
    23a2:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	60 e0       	ldi	r22, 0x00	; 0
    23a8:	40 e0       	ldi	r20, 0x00	; 0
    23aa:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	61 e0       	ldi	r22, 0x01	; 1
    23b2:	40 e0       	ldi	r20, 0x00	; 0
    23b4:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	62 e0       	ldi	r22, 0x02	; 2
    23bc:	40 e0       	ldi	r20, 0x00	; 0
    23be:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	63 e0       	ldi	r22, 0x03	; 3
    23c6:	40 e0       	ldi	r20, 0x00	; 0
    23c8:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	64 e0       	ldi	r22, 0x04	; 4
    23d0:	40 e0       	ldi	r20, 0x00	; 0
    23d2:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	65 e0       	ldi	r22, 0x05	; 5
    23da:	40 e0       	ldi	r20, 0x00	; 0
    23dc:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	66 e0       	ldi	r22, 0x06	; 6
    23e4:	40 e0       	ldi	r20, 0x00	; 0
    23e6:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	67 e0       	ldi	r22, 0x07	; 7
    23ee:	40 e0       	ldi	r20, 0x00	; 0
    23f0:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    23f4:	1f 86       	std	Y+15, r1	; 0x0f
    23f6:	ab c0       	rjmp	.+342    	; 0x254e <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	6f 85       	ldd	r22, Y+15	; 0x0f
    23fc:	41 e0       	ldi	r20, 0x01	; 1
    23fe:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	6f 85       	ldd	r22, Y+15	; 0x0f
    2406:	40 e0       	ldi	r20, 0x00	; 0
    2408:	0e 94 75 0f 	call	0x1eea	; 0x1eea <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    240c:	18 8a       	std	Y+16, r1	; 0x10
    240e:	22 c0       	rjmp	.+68     	; 0x2454 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2410:	88 89       	ldd	r24, Y+16	; 0x10
    2412:	98 2f       	mov	r25, r24
    2414:	9c 5f       	subi	r25, 0xFC	; 252
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	69 2f       	mov	r22, r25
    241a:	0e 94 60 10 	call	0x20c0	; 0x20c0 <GPIO_readPin>
    241e:	88 23       	and	r24, r24
    2420:	b1 f4       	brne	.+44     	; 0x244e <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2422:	8f 85       	ldd	r24, Y+15	; 0x0f
    2424:	88 2f       	mov	r24, r24
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	88 0f       	add	r24, r24
    242a:	99 1f       	adc	r25, r25
    242c:	88 0f       	add	r24, r24
    242e:	99 1f       	adc	r25, r25
    2430:	98 2f       	mov	r25, r24
    2432:	88 89       	ldd	r24, Y+16	; 0x10
    2434:	89 0f       	add	r24, r25
    2436:	8f 5f       	subi	r24, 0xFF	; 255
    2438:	0e 94 ac 12 	call	0x2558	; 0x2558 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(30); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    243c:	60 96       	adiw	r28, 0x10	; 16
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	f8 94       	cli
    2442:	de bf       	out	0x3e, r29	; 62
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	cd bf       	out	0x3d, r28	; 61
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    244e:	88 89       	ldd	r24, Y+16	; 0x10
    2450:	8f 5f       	subi	r24, 0xFF	; 255
    2452:	88 8b       	std	Y+16, r24	; 0x10
    2454:	88 89       	ldd	r24, Y+16	; 0x10
    2456:	84 30       	cpi	r24, 0x04	; 4
    2458:	d8 f2       	brcs	.-74     	; 0x2410 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	6f 85       	ldd	r22, Y+15	; 0x0f
    245e:	40 e0       	ldi	r20, 0x00	; 0
    2460:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <GPIO_setupPinDirection>
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	a0 ef       	ldi	r26, 0xF0	; 240
    246a:	b1 e4       	ldi	r27, 0x41	; 65
    246c:	8b 87       	std	Y+11, r24	; 0x0b
    246e:	9c 87       	std	Y+12, r25	; 0x0c
    2470:	ad 87       	std	Y+13, r26	; 0x0d
    2472:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2474:	6b 85       	ldd	r22, Y+11	; 0x0b
    2476:	7c 85       	ldd	r23, Y+12	; 0x0c
    2478:	8d 85       	ldd	r24, Y+13	; 0x0d
    247a:	9e 85       	ldd	r25, Y+14	; 0x0e
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	4a ef       	ldi	r20, 0xFA	; 250
    2482:	54 e4       	ldi	r21, 0x44	; 68
    2484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	8f 83       	std	Y+7, r24	; 0x07
    248e:	98 87       	std	Y+8, r25	; 0x08
    2490:	a9 87       	std	Y+9, r26	; 0x09
    2492:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2494:	6f 81       	ldd	r22, Y+7	; 0x07
    2496:	78 85       	ldd	r23, Y+8	; 0x08
    2498:	89 85       	ldd	r24, Y+9	; 0x09
    249a:	9a 85       	ldd	r25, Y+10	; 0x0a
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	40 e8       	ldi	r20, 0x80	; 128
    24a2:	5f e3       	ldi	r21, 0x3F	; 63
    24a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24a8:	88 23       	and	r24, r24
    24aa:	2c f4       	brge	.+10     	; 0x24b6 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	9e 83       	std	Y+6, r25	; 0x06
    24b2:	8d 83       	std	Y+5, r24	; 0x05
    24b4:	3f c0       	rjmp	.+126    	; 0x2534 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    24b6:	6f 81       	ldd	r22, Y+7	; 0x07
    24b8:	78 85       	ldd	r23, Y+8	; 0x08
    24ba:	89 85       	ldd	r24, Y+9	; 0x09
    24bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	3f ef       	ldi	r19, 0xFF	; 255
    24c2:	4f e7       	ldi	r20, 0x7F	; 127
    24c4:	57 e4       	ldi	r21, 0x47	; 71
    24c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ca:	18 16       	cp	r1, r24
    24cc:	4c f5       	brge	.+82     	; 0x2520 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    24d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	40 e2       	ldi	r20, 0x20	; 32
    24dc:	51 e4       	ldi	r21, 0x41	; 65
    24de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	bc 01       	movw	r22, r24
    24e8:	cd 01       	movw	r24, r26
    24ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	9e 83       	std	Y+6, r25	; 0x06
    24f4:	8d 83       	std	Y+5, r24	; 0x05
    24f6:	0f c0       	rjmp	.+30     	; 0x2516 <KEYPAD_getPressedKey+0x186>
    24f8:	88 ec       	ldi	r24, 0xC8	; 200
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	9c 83       	std	Y+4, r25	; 0x04
    24fe:	8b 83       	std	Y+3, r24	; 0x03
    2500:	8b 81       	ldd	r24, Y+3	; 0x03
    2502:	9c 81       	ldd	r25, Y+4	; 0x04
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	f1 f7       	brne	.-4      	; 0x2504 <KEYPAD_getPressedKey+0x174>
    2508:	9c 83       	std	Y+4, r25	; 0x04
    250a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    250c:	8d 81       	ldd	r24, Y+5	; 0x05
    250e:	9e 81       	ldd	r25, Y+6	; 0x06
    2510:	01 97       	sbiw	r24, 0x01	; 1
    2512:	9e 83       	std	Y+6, r25	; 0x06
    2514:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2516:	8d 81       	ldd	r24, Y+5	; 0x05
    2518:	9e 81       	ldd	r25, Y+6	; 0x06
    251a:	00 97       	sbiw	r24, 0x00	; 0
    251c:	69 f7       	brne	.-38     	; 0x24f8 <KEYPAD_getPressedKey+0x168>
    251e:	14 c0       	rjmp	.+40     	; 0x2548 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2520:	6f 81       	ldd	r22, Y+7	; 0x07
    2522:	78 85       	ldd	r23, Y+8	; 0x08
    2524:	89 85       	ldd	r24, Y+9	; 0x09
    2526:	9a 85       	ldd	r25, Y+10	; 0x0a
    2528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	9e 83       	std	Y+6, r25	; 0x06
    2532:	8d 83       	std	Y+5, r24	; 0x05
    2534:	8d 81       	ldd	r24, Y+5	; 0x05
    2536:	9e 81       	ldd	r25, Y+6	; 0x06
    2538:	9a 83       	std	Y+2, r25	; 0x02
    253a:	89 83       	std	Y+1, r24	; 0x01
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	9a 81       	ldd	r25, Y+2	; 0x02
    2540:	01 97       	sbiw	r24, 0x01	; 1
    2542:	f1 f7       	brne	.-4      	; 0x2540 <KEYPAD_getPressedKey+0x1b0>
    2544:	9a 83       	std	Y+2, r25	; 0x02
    2546:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2548:	8f 85       	ldd	r24, Y+15	; 0x0f
    254a:	8f 5f       	subi	r24, 0xFF	; 255
    254c:	8f 87       	std	Y+15, r24	; 0x0f
    254e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2550:	84 30       	cpi	r24, 0x04	; 4
    2552:	08 f4       	brcc	.+2      	; 0x2556 <KEYPAD_getPressedKey+0x1c6>
    2554:	51 cf       	rjmp	.-350    	; 0x23f8 <KEYPAD_getPressedKey+0x68>
    2556:	4e cf       	rjmp	.-356    	; 0x23f4 <KEYPAD_getPressedKey+0x64>

00002558 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2558:	df 93       	push	r29
    255a:	cf 93       	push	r28
    255c:	00 d0       	rcall	.+0      	; 0x255e <KEYPAD_4x4_adjustKeyNumber+0x6>
    255e:	00 d0       	rcall	.+0      	; 0x2560 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
    2564:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2566:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
    256a:	28 2f       	mov	r18, r24
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	3c 83       	std	Y+4, r19	; 0x04
    2570:	2b 83       	std	Y+3, r18	; 0x03
    2572:	8b 81       	ldd	r24, Y+3	; 0x03
    2574:	9c 81       	ldd	r25, Y+4	; 0x04
    2576:	88 30       	cpi	r24, 0x08	; 8
    2578:	91 05       	cpc	r25, r1
    257a:	09 f4       	brne	.+2      	; 0x257e <KEYPAD_4x4_adjustKeyNumber+0x26>
    257c:	70 c0       	rjmp	.+224    	; 0x265e <KEYPAD_4x4_adjustKeyNumber+0x106>
    257e:	2b 81       	ldd	r18, Y+3	; 0x03
    2580:	3c 81       	ldd	r19, Y+4	; 0x04
    2582:	29 30       	cpi	r18, 0x09	; 9
    2584:	31 05       	cpc	r19, r1
    2586:	5c f5       	brge	.+86     	; 0x25de <KEYPAD_4x4_adjustKeyNumber+0x86>
    2588:	8b 81       	ldd	r24, Y+3	; 0x03
    258a:	9c 81       	ldd	r25, Y+4	; 0x04
    258c:	84 30       	cpi	r24, 0x04	; 4
    258e:	91 05       	cpc	r25, r1
    2590:	09 f4       	brne	.+2      	; 0x2594 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2592:	59 c0       	rjmp	.+178    	; 0x2646 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2594:	2b 81       	ldd	r18, Y+3	; 0x03
    2596:	3c 81       	ldd	r19, Y+4	; 0x04
    2598:	25 30       	cpi	r18, 0x05	; 5
    259a:	31 05       	cpc	r19, r1
    259c:	9c f4       	brge	.+38     	; 0x25c4 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	9c 81       	ldd	r25, Y+4	; 0x04
    25a2:	82 30       	cpi	r24, 0x02	; 2
    25a4:	91 05       	cpc	r25, r1
    25a6:	09 f4       	brne	.+2      	; 0x25aa <KEYPAD_4x4_adjustKeyNumber+0x52>
    25a8:	48 c0       	rjmp	.+144    	; 0x263a <KEYPAD_4x4_adjustKeyNumber+0xe2>
    25aa:	2b 81       	ldd	r18, Y+3	; 0x03
    25ac:	3c 81       	ldd	r19, Y+4	; 0x04
    25ae:	23 30       	cpi	r18, 0x03	; 3
    25b0:	31 05       	cpc	r19, r1
    25b2:	0c f0       	brlt	.+2      	; 0x25b6 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    25b4:	45 c0       	rjmp	.+138    	; 0x2640 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    25b6:	8b 81       	ldd	r24, Y+3	; 0x03
    25b8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ba:	81 30       	cpi	r24, 0x01	; 1
    25bc:	91 05       	cpc	r25, r1
    25be:	09 f4       	brne	.+2      	; 0x25c2 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    25c0:	39 c0       	rjmp	.+114    	; 0x2634 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    25c2:	67 c0       	rjmp	.+206    	; 0x2692 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    25c4:	2b 81       	ldd	r18, Y+3	; 0x03
    25c6:	3c 81       	ldd	r19, Y+4	; 0x04
    25c8:	26 30       	cpi	r18, 0x06	; 6
    25ca:	31 05       	cpc	r19, r1
    25cc:	09 f4       	brne	.+2      	; 0x25d0 <KEYPAD_4x4_adjustKeyNumber+0x78>
    25ce:	41 c0       	rjmp	.+130    	; 0x2652 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    25d0:	8b 81       	ldd	r24, Y+3	; 0x03
    25d2:	9c 81       	ldd	r25, Y+4	; 0x04
    25d4:	87 30       	cpi	r24, 0x07	; 7
    25d6:	91 05       	cpc	r25, r1
    25d8:	0c f0       	brlt	.+2      	; 0x25dc <KEYPAD_4x4_adjustKeyNumber+0x84>
    25da:	3e c0       	rjmp	.+124    	; 0x2658 <KEYPAD_4x4_adjustKeyNumber+0x100>
    25dc:	37 c0       	rjmp	.+110    	; 0x264c <KEYPAD_4x4_adjustKeyNumber+0xf4>
    25de:	2b 81       	ldd	r18, Y+3	; 0x03
    25e0:	3c 81       	ldd	r19, Y+4	; 0x04
    25e2:	2c 30       	cpi	r18, 0x0C	; 12
    25e4:	31 05       	cpc	r19, r1
    25e6:	09 f4       	brne	.+2      	; 0x25ea <KEYPAD_4x4_adjustKeyNumber+0x92>
    25e8:	46 c0       	rjmp	.+140    	; 0x2676 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    25ea:	8b 81       	ldd	r24, Y+3	; 0x03
    25ec:	9c 81       	ldd	r25, Y+4	; 0x04
    25ee:	8d 30       	cpi	r24, 0x0D	; 13
    25f0:	91 05       	cpc	r25, r1
    25f2:	5c f4       	brge	.+22     	; 0x260a <KEYPAD_4x4_adjustKeyNumber+0xb2>
    25f4:	2b 81       	ldd	r18, Y+3	; 0x03
    25f6:	3c 81       	ldd	r19, Y+4	; 0x04
    25f8:	2a 30       	cpi	r18, 0x0A	; 10
    25fa:	31 05       	cpc	r19, r1
    25fc:	b1 f1       	breq	.+108    	; 0x266a <KEYPAD_4x4_adjustKeyNumber+0x112>
    25fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2600:	9c 81       	ldd	r25, Y+4	; 0x04
    2602:	8b 30       	cpi	r24, 0x0B	; 11
    2604:	91 05       	cpc	r25, r1
    2606:	a4 f5       	brge	.+104    	; 0x2670 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2608:	2d c0       	rjmp	.+90     	; 0x2664 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    260a:	2b 81       	ldd	r18, Y+3	; 0x03
    260c:	3c 81       	ldd	r19, Y+4	; 0x04
    260e:	2e 30       	cpi	r18, 0x0E	; 14
    2610:	31 05       	cpc	r19, r1
    2612:	b9 f1       	breq	.+110    	; 0x2682 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2614:	8b 81       	ldd	r24, Y+3	; 0x03
    2616:	9c 81       	ldd	r25, Y+4	; 0x04
    2618:	8e 30       	cpi	r24, 0x0E	; 14
    261a:	91 05       	cpc	r25, r1
    261c:	7c f1       	brlt	.+94     	; 0x267c <KEYPAD_4x4_adjustKeyNumber+0x124>
    261e:	2b 81       	ldd	r18, Y+3	; 0x03
    2620:	3c 81       	ldd	r19, Y+4	; 0x04
    2622:	2f 30       	cpi	r18, 0x0F	; 15
    2624:	31 05       	cpc	r19, r1
    2626:	79 f1       	breq	.+94     	; 0x2686 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2628:	8b 81       	ldd	r24, Y+3	; 0x03
    262a:	9c 81       	ldd	r25, Y+4	; 0x04
    262c:	80 31       	cpi	r24, 0x10	; 16
    262e:	91 05       	cpc	r25, r1
    2630:	69 f1       	breq	.+90     	; 0x268c <KEYPAD_4x4_adjustKeyNumber+0x134>
    2632:	2f c0       	rjmp	.+94     	; 0x2692 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2634:	87 e0       	ldi	r24, 0x07	; 7
    2636:	89 83       	std	Y+1, r24	; 0x01
    2638:	2e c0       	rjmp	.+92     	; 0x2696 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    263a:	88 e0       	ldi	r24, 0x08	; 8
    263c:	89 83       	std	Y+1, r24	; 0x01
    263e:	2b c0       	rjmp	.+86     	; 0x2696 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2640:	89 e0       	ldi	r24, 0x09	; 9
    2642:	89 83       	std	Y+1, r24	; 0x01
    2644:	28 c0       	rjmp	.+80     	; 0x2696 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2646:	85 e2       	ldi	r24, 0x25	; 37
    2648:	89 83       	std	Y+1, r24	; 0x01
    264a:	25 c0       	rjmp	.+74     	; 0x2696 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    264c:	84 e0       	ldi	r24, 0x04	; 4
    264e:	89 83       	std	Y+1, r24	; 0x01
    2650:	22 c0       	rjmp	.+68     	; 0x2696 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2652:	85 e0       	ldi	r24, 0x05	; 5
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	1f c0       	rjmp	.+62     	; 0x2696 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2658:	86 e0       	ldi	r24, 0x06	; 6
    265a:	89 83       	std	Y+1, r24	; 0x01
    265c:	1c c0       	rjmp	.+56     	; 0x2696 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    265e:	8a e2       	ldi	r24, 0x2A	; 42
    2660:	89 83       	std	Y+1, r24	; 0x01
    2662:	19 c0       	rjmp	.+50     	; 0x2696 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	89 83       	std	Y+1, r24	; 0x01
    2668:	16 c0       	rjmp	.+44     	; 0x2696 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    266a:	82 e0       	ldi	r24, 0x02	; 2
    266c:	89 83       	std	Y+1, r24	; 0x01
    266e:	13 c0       	rjmp	.+38     	; 0x2696 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2670:	83 e0       	ldi	r24, 0x03	; 3
    2672:	89 83       	std	Y+1, r24	; 0x01
    2674:	10 c0       	rjmp	.+32     	; 0x2696 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2676:	8d e2       	ldi	r24, 0x2D	; 45
    2678:	89 83       	std	Y+1, r24	; 0x01
    267a:	0d c0       	rjmp	.+26     	; 0x2696 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    267c:	8d e0       	ldi	r24, 0x0D	; 13
    267e:	89 83       	std	Y+1, r24	; 0x01
    2680:	0a c0       	rjmp	.+20     	; 0x2696 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2682:	19 82       	std	Y+1, r1	; 0x01
    2684:	08 c0       	rjmp	.+16     	; 0x2696 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2686:	8d e3       	ldi	r24, 0x3D	; 61
    2688:	89 83       	std	Y+1, r24	; 0x01
    268a:	05 c0       	rjmp	.+10     	; 0x2696 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    268c:	8b e2       	ldi	r24, 0x2B	; 43
    268e:	89 83       	std	Y+1, r24	; 0x01
    2690:	02 c0       	rjmp	.+4      	; 0x2696 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2692:	8a 81       	ldd	r24, Y+2	; 0x02
    2694:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2696:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	08 95       	ret

000026a6 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void)
{
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
    26ae:	2e 97       	sbiw	r28, 0x0e	; 14
    26b0:	0f b6       	in	r0, 0x3f	; 63
    26b2:	f8 94       	cli
    26b4:	de bf       	out	0x3e, r29	; 62
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    26ba:	82 e0       	ldi	r24, 0x02	; 2
    26bc:	66 e0       	ldi	r22, 0x06	; 6
    26be:	41 e0       	ldi	r20, 0x01	; 1
    26c0:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    26c4:	82 e0       	ldi	r24, 0x02	; 2
    26c6:	67 e0       	ldi	r22, 0x07	; 7
    26c8:	41 e0       	ldi	r20, 0x01	; 1
    26ca:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	6f ef       	ldi	r22, 0xFF	; 255
    26d2:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <GPIO_setupPortDirection>
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	a0 ea       	ldi	r26, 0xA0	; 160
    26dc:	b1 e4       	ldi	r27, 0x41	; 65
    26de:	8b 87       	std	Y+11, r24	; 0x0b
    26e0:	9c 87       	std	Y+12, r25	; 0x0c
    26e2:	ad 87       	std	Y+13, r26	; 0x0d
    26e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	4a ef       	ldi	r20, 0xFA	; 250
    26f4:	54 e4       	ldi	r21, 0x44	; 68
    26f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	8f 83       	std	Y+7, r24	; 0x07
    2700:	98 87       	std	Y+8, r25	; 0x08
    2702:	a9 87       	std	Y+9, r26	; 0x09
    2704:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2706:	6f 81       	ldd	r22, Y+7	; 0x07
    2708:	78 85       	ldd	r23, Y+8	; 0x08
    270a:	89 85       	ldd	r24, Y+9	; 0x09
    270c:	9a 85       	ldd	r25, Y+10	; 0x0a
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	40 e8       	ldi	r20, 0x80	; 128
    2714:	5f e3       	ldi	r21, 0x3F	; 63
    2716:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    271a:	88 23       	and	r24, r24
    271c:	2c f4       	brge	.+10     	; 0x2728 <LCD_init+0x82>
		__ticks = 1;
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	9e 83       	std	Y+6, r25	; 0x06
    2724:	8d 83       	std	Y+5, r24	; 0x05
    2726:	3f c0       	rjmp	.+126    	; 0x27a6 <LCD_init+0x100>
	else if (__tmp > 65535)
    2728:	6f 81       	ldd	r22, Y+7	; 0x07
    272a:	78 85       	ldd	r23, Y+8	; 0x08
    272c:	89 85       	ldd	r24, Y+9	; 0x09
    272e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	3f ef       	ldi	r19, 0xFF	; 255
    2734:	4f e7       	ldi	r20, 0x7F	; 127
    2736:	57 e4       	ldi	r21, 0x47	; 71
    2738:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    273c:	18 16       	cp	r1, r24
    273e:	4c f5       	brge	.+82     	; 0x2792 <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2740:	6b 85       	ldd	r22, Y+11	; 0x0b
    2742:	7c 85       	ldd	r23, Y+12	; 0x0c
    2744:	8d 85       	ldd	r24, Y+13	; 0x0d
    2746:	9e 85       	ldd	r25, Y+14	; 0x0e
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e2       	ldi	r20, 0x20	; 32
    274e:	51 e4       	ldi	r21, 0x41	; 65
    2750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	bc 01       	movw	r22, r24
    275a:	cd 01       	movw	r24, r26
    275c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	9e 83       	std	Y+6, r25	; 0x06
    2766:	8d 83       	std	Y+5, r24	; 0x05
    2768:	0f c0       	rjmp	.+30     	; 0x2788 <LCD_init+0xe2>
    276a:	88 ec       	ldi	r24, 0xC8	; 200
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	9c 83       	std	Y+4, r25	; 0x04
    2770:	8b 83       	std	Y+3, r24	; 0x03
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
    2774:	9c 81       	ldd	r25, Y+4	; 0x04
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	f1 f7       	brne	.-4      	; 0x2776 <LCD_init+0xd0>
    277a:	9c 83       	std	Y+4, r25	; 0x04
    277c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277e:	8d 81       	ldd	r24, Y+5	; 0x05
    2780:	9e 81       	ldd	r25, Y+6	; 0x06
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	9e 83       	std	Y+6, r25	; 0x06
    2786:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2788:	8d 81       	ldd	r24, Y+5	; 0x05
    278a:	9e 81       	ldd	r25, Y+6	; 0x06
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	69 f7       	brne	.-38     	; 0x276a <LCD_init+0xc4>
    2790:	14 c0       	rjmp	.+40     	; 0x27ba <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2792:	6f 81       	ldd	r22, Y+7	; 0x07
    2794:	78 85       	ldd	r23, Y+8	; 0x08
    2796:	89 85       	ldd	r24, Y+9	; 0x09
    2798:	9a 85       	ldd	r25, Y+10	; 0x0a
    279a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	9e 83       	std	Y+6, r25	; 0x06
    27a4:	8d 83       	std	Y+5, r24	; 0x05
    27a6:	8d 81       	ldd	r24, Y+5	; 0x05
    27a8:	9e 81       	ldd	r25, Y+6	; 0x06
    27aa:	9a 83       	std	Y+2, r25	; 0x02
    27ac:	89 83       	std	Y+1, r24	; 0x01
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	9a 81       	ldd	r25, Y+2	; 0x02
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	f1 f7       	brne	.-4      	; 0x27b2 <LCD_init+0x10c>
    27b6:	9a 83       	std	Y+2, r25	; 0x02
    27b8:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    27ba:	88 e3       	ldi	r24, 0x38	; 56
    27bc:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    27c0:	8c e0       	ldi	r24, 0x0C	; 12
    27c2:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_sendCommand>
}
    27cc:	2e 96       	adiw	r28, 0x0e	; 14
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	f8 94       	cli
    27d2:	de bf       	out	0x3e, r29	; 62
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	cd bf       	out	0x3d, r28	; 61
    27d8:	cf 91       	pop	r28
    27da:	df 91       	pop	r29
    27dc:	08 95       	ret

000027de <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    27de:	df 93       	push	r29
    27e0:	cf 93       	push	r28
    27e2:	cd b7       	in	r28, 0x3d	; 61
    27e4:	de b7       	in	r29, 0x3e	; 62
    27e6:	e9 97       	sbiw	r28, 0x39	; 57
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	f8 94       	cli
    27ec:	de bf       	out	0x3e, r29	; 62
    27ee:	0f be       	out	0x3f, r0	; 63
    27f0:	cd bf       	out	0x3d, r28	; 61
    27f2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    27f4:	82 e0       	ldi	r24, 0x02	; 2
    27f6:	66 e0       	ldi	r22, 0x06	; 6
    27f8:	40 e0       	ldi	r20, 0x00	; 0
    27fa:	0e 94 75 0f 	call	0x1eea	; 0x1eea <GPIO_writePin>
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	a0 e8       	ldi	r26, 0x80	; 128
    2804:	bf e3       	ldi	r27, 0x3F	; 63
    2806:	8d ab       	std	Y+53, r24	; 0x35
    2808:	9e ab       	std	Y+54, r25	; 0x36
    280a:	af ab       	std	Y+55, r26	; 0x37
    280c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    280e:	6d a9       	ldd	r22, Y+53	; 0x35
    2810:	7e a9       	ldd	r23, Y+54	; 0x36
    2812:	8f a9       	ldd	r24, Y+55	; 0x37
    2814:	98 ad       	ldd	r25, Y+56	; 0x38
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	4a ef       	ldi	r20, 0xFA	; 250
    281c:	54 e4       	ldi	r21, 0x44	; 68
    281e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	89 ab       	std	Y+49, r24	; 0x31
    2828:	9a ab       	std	Y+50, r25	; 0x32
    282a:	ab ab       	std	Y+51, r26	; 0x33
    282c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    282e:	69 a9       	ldd	r22, Y+49	; 0x31
    2830:	7a a9       	ldd	r23, Y+50	; 0x32
    2832:	8b a9       	ldd	r24, Y+51	; 0x33
    2834:	9c a9       	ldd	r25, Y+52	; 0x34
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	40 e8       	ldi	r20, 0x80	; 128
    283c:	5f e3       	ldi	r21, 0x3F	; 63
    283e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2842:	88 23       	and	r24, r24
    2844:	2c f4       	brge	.+10     	; 0x2850 <LCD_sendCommand+0x72>
		__ticks = 1;
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	98 ab       	std	Y+48, r25	; 0x30
    284c:	8f a7       	std	Y+47, r24	; 0x2f
    284e:	3f c0       	rjmp	.+126    	; 0x28ce <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2850:	69 a9       	ldd	r22, Y+49	; 0x31
    2852:	7a a9       	ldd	r23, Y+50	; 0x32
    2854:	8b a9       	ldd	r24, Y+51	; 0x33
    2856:	9c a9       	ldd	r25, Y+52	; 0x34
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	3f ef       	ldi	r19, 0xFF	; 255
    285c:	4f e7       	ldi	r20, 0x7F	; 127
    285e:	57 e4       	ldi	r21, 0x47	; 71
    2860:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2864:	18 16       	cp	r1, r24
    2866:	4c f5       	brge	.+82     	; 0x28ba <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2868:	6d a9       	ldd	r22, Y+53	; 0x35
    286a:	7e a9       	ldd	r23, Y+54	; 0x36
    286c:	8f a9       	ldd	r24, Y+55	; 0x37
    286e:	98 ad       	ldd	r25, Y+56	; 0x38
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	40 e2       	ldi	r20, 0x20	; 32
    2876:	51 e4       	ldi	r21, 0x41	; 65
    2878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	bc 01       	movw	r22, r24
    2882:	cd 01       	movw	r24, r26
    2884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	98 ab       	std	Y+48, r25	; 0x30
    288e:	8f a7       	std	Y+47, r24	; 0x2f
    2890:	0f c0       	rjmp	.+30     	; 0x28b0 <LCD_sendCommand+0xd2>
    2892:	88 ec       	ldi	r24, 0xC8	; 200
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	9e a7       	std	Y+46, r25	; 0x2e
    2898:	8d a7       	std	Y+45, r24	; 0x2d
    289a:	8d a5       	ldd	r24, Y+45	; 0x2d
    289c:	9e a5       	ldd	r25, Y+46	; 0x2e
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	f1 f7       	brne	.-4      	; 0x289e <LCD_sendCommand+0xc0>
    28a2:	9e a7       	std	Y+46, r25	; 0x2e
    28a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    28a8:	98 a9       	ldd	r25, Y+48	; 0x30
    28aa:	01 97       	sbiw	r24, 0x01	; 1
    28ac:	98 ab       	std	Y+48, r25	; 0x30
    28ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    28b2:	98 a9       	ldd	r25, Y+48	; 0x30
    28b4:	00 97       	sbiw	r24, 0x00	; 0
    28b6:	69 f7       	brne	.-38     	; 0x2892 <LCD_sendCommand+0xb4>
    28b8:	14 c0       	rjmp	.+40     	; 0x28e2 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ba:	69 a9       	ldd	r22, Y+49	; 0x31
    28bc:	7a a9       	ldd	r23, Y+50	; 0x32
    28be:	8b a9       	ldd	r24, Y+51	; 0x33
    28c0:	9c a9       	ldd	r25, Y+52	; 0x34
    28c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	98 ab       	std	Y+48, r25	; 0x30
    28cc:	8f a7       	std	Y+47, r24	; 0x2f
    28ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    28d0:	98 a9       	ldd	r25, Y+48	; 0x30
    28d2:	9c a7       	std	Y+44, r25	; 0x2c
    28d4:	8b a7       	std	Y+43, r24	; 0x2b
    28d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    28d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    28da:	01 97       	sbiw	r24, 0x01	; 1
    28dc:	f1 f7       	brne	.-4      	; 0x28da <LCD_sendCommand+0xfc>
    28de:	9c a7       	std	Y+44, r25	; 0x2c
    28e0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    28e2:	82 e0       	ldi	r24, 0x02	; 2
    28e4:	67 e0       	ldi	r22, 0x07	; 7
    28e6:	41 e0       	ldi	r20, 0x01	; 1
    28e8:	0e 94 75 0f 	call	0x1eea	; 0x1eea <GPIO_writePin>
    28ec:	80 e0       	ldi	r24, 0x00	; 0
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	a0 e8       	ldi	r26, 0x80	; 128
    28f2:	bf e3       	ldi	r27, 0x3F	; 63
    28f4:	8f a3       	std	Y+39, r24	; 0x27
    28f6:	98 a7       	std	Y+40, r25	; 0x28
    28f8:	a9 a7       	std	Y+41, r26	; 0x29
    28fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28fc:	6f a1       	ldd	r22, Y+39	; 0x27
    28fe:	78 a5       	ldd	r23, Y+40	; 0x28
    2900:	89 a5       	ldd	r24, Y+41	; 0x29
    2902:	9a a5       	ldd	r25, Y+42	; 0x2a
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	4a ef       	ldi	r20, 0xFA	; 250
    290a:	54 e4       	ldi	r21, 0x44	; 68
    290c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	8b a3       	std	Y+35, r24	; 0x23
    2916:	9c a3       	std	Y+36, r25	; 0x24
    2918:	ad a3       	std	Y+37, r26	; 0x25
    291a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    291c:	6b a1       	ldd	r22, Y+35	; 0x23
    291e:	7c a1       	ldd	r23, Y+36	; 0x24
    2920:	8d a1       	ldd	r24, Y+37	; 0x25
    2922:	9e a1       	ldd	r25, Y+38	; 0x26
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	40 e8       	ldi	r20, 0x80	; 128
    292a:	5f e3       	ldi	r21, 0x3F	; 63
    292c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2930:	88 23       	and	r24, r24
    2932:	2c f4       	brge	.+10     	; 0x293e <LCD_sendCommand+0x160>
		__ticks = 1;
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	9a a3       	std	Y+34, r25	; 0x22
    293a:	89 a3       	std	Y+33, r24	; 0x21
    293c:	3f c0       	rjmp	.+126    	; 0x29bc <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    293e:	6b a1       	ldd	r22, Y+35	; 0x23
    2940:	7c a1       	ldd	r23, Y+36	; 0x24
    2942:	8d a1       	ldd	r24, Y+37	; 0x25
    2944:	9e a1       	ldd	r25, Y+38	; 0x26
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	3f ef       	ldi	r19, 0xFF	; 255
    294a:	4f e7       	ldi	r20, 0x7F	; 127
    294c:	57 e4       	ldi	r21, 0x47	; 71
    294e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2952:	18 16       	cp	r1, r24
    2954:	4c f5       	brge	.+82     	; 0x29a8 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2956:	6f a1       	ldd	r22, Y+39	; 0x27
    2958:	78 a5       	ldd	r23, Y+40	; 0x28
    295a:	89 a5       	ldd	r24, Y+41	; 0x29
    295c:	9a a5       	ldd	r25, Y+42	; 0x2a
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	40 e2       	ldi	r20, 0x20	; 32
    2964:	51 e4       	ldi	r21, 0x41	; 65
    2966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	bc 01       	movw	r22, r24
    2970:	cd 01       	movw	r24, r26
    2972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	9a a3       	std	Y+34, r25	; 0x22
    297c:	89 a3       	std	Y+33, r24	; 0x21
    297e:	0f c0       	rjmp	.+30     	; 0x299e <LCD_sendCommand+0x1c0>
    2980:	88 ec       	ldi	r24, 0xC8	; 200
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	98 a3       	std	Y+32, r25	; 0x20
    2986:	8f 8f       	std	Y+31, r24	; 0x1f
    2988:	8f 8d       	ldd	r24, Y+31	; 0x1f
    298a:	98 a1       	ldd	r25, Y+32	; 0x20
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	f1 f7       	brne	.-4      	; 0x298c <LCD_sendCommand+0x1ae>
    2990:	98 a3       	std	Y+32, r25	; 0x20
    2992:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2994:	89 a1       	ldd	r24, Y+33	; 0x21
    2996:	9a a1       	ldd	r25, Y+34	; 0x22
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	9a a3       	std	Y+34, r25	; 0x22
    299c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    299e:	89 a1       	ldd	r24, Y+33	; 0x21
    29a0:	9a a1       	ldd	r25, Y+34	; 0x22
    29a2:	00 97       	sbiw	r24, 0x00	; 0
    29a4:	69 f7       	brne	.-38     	; 0x2980 <LCD_sendCommand+0x1a2>
    29a6:	14 c0       	rjmp	.+40     	; 0x29d0 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a8:	6b a1       	ldd	r22, Y+35	; 0x23
    29aa:	7c a1       	ldd	r23, Y+36	; 0x24
    29ac:	8d a1       	ldd	r24, Y+37	; 0x25
    29ae:	9e a1       	ldd	r25, Y+38	; 0x26
    29b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	9a a3       	std	Y+34, r25	; 0x22
    29ba:	89 a3       	std	Y+33, r24	; 0x21
    29bc:	89 a1       	ldd	r24, Y+33	; 0x21
    29be:	9a a1       	ldd	r25, Y+34	; 0x22
    29c0:	9e 8f       	std	Y+30, r25	; 0x1e
    29c2:	8d 8f       	std	Y+29, r24	; 0x1d
    29c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29c8:	01 97       	sbiw	r24, 0x01	; 1
    29ca:	f1 f7       	brne	.-4      	; 0x29c8 <LCD_sendCommand+0x1ea>
    29cc:	9e 8f       	std	Y+30, r25	; 0x1e
    29ce:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	69 ad       	ldd	r22, Y+57	; 0x39
    29d4:	0e 94 3f 11 	call	0x227e	; 0x227e <GPIO_writePort>
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	a0 e8       	ldi	r26, 0x80	; 128
    29de:	bf e3       	ldi	r27, 0x3F	; 63
    29e0:	89 8f       	std	Y+25, r24	; 0x19
    29e2:	9a 8f       	std	Y+26, r25	; 0x1a
    29e4:	ab 8f       	std	Y+27, r26	; 0x1b
    29e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29e8:	69 8d       	ldd	r22, Y+25	; 0x19
    29ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	4a ef       	ldi	r20, 0xFA	; 250
    29f6:	54 e4       	ldi	r21, 0x44	; 68
    29f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	8d 8b       	std	Y+21, r24	; 0x15
    2a02:	9e 8b       	std	Y+22, r25	; 0x16
    2a04:	af 8b       	std	Y+23, r26	; 0x17
    2a06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a08:	6d 89       	ldd	r22, Y+21	; 0x15
    2a0a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a0e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	40 e8       	ldi	r20, 0x80	; 128
    2a16:	5f e3       	ldi	r21, 0x3F	; 63
    2a18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a1c:	88 23       	and	r24, r24
    2a1e:	2c f4       	brge	.+10     	; 0x2a2a <LCD_sendCommand+0x24c>
		__ticks = 1;
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	9c 8b       	std	Y+20, r25	; 0x14
    2a26:	8b 8b       	std	Y+19, r24	; 0x13
    2a28:	3f c0       	rjmp	.+126    	; 0x2aa8 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2a2a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a2c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a30:	98 8d       	ldd	r25, Y+24	; 0x18
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	3f ef       	ldi	r19, 0xFF	; 255
    2a36:	4f e7       	ldi	r20, 0x7F	; 127
    2a38:	57 e4       	ldi	r21, 0x47	; 71
    2a3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a3e:	18 16       	cp	r1, r24
    2a40:	4c f5       	brge	.+82     	; 0x2a94 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a42:	69 8d       	ldd	r22, Y+25	; 0x19
    2a44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	40 e2       	ldi	r20, 0x20	; 32
    2a50:	51 e4       	ldi	r21, 0x41	; 65
    2a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	bc 01       	movw	r22, r24
    2a5c:	cd 01       	movw	r24, r26
    2a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	9c 8b       	std	Y+20, r25	; 0x14
    2a68:	8b 8b       	std	Y+19, r24	; 0x13
    2a6a:	0f c0       	rjmp	.+30     	; 0x2a8a <LCD_sendCommand+0x2ac>
    2a6c:	88 ec       	ldi	r24, 0xC8	; 200
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	9a 8b       	std	Y+18, r25	; 0x12
    2a72:	89 8b       	std	Y+17, r24	; 0x11
    2a74:	89 89       	ldd	r24, Y+17	; 0x11
    2a76:	9a 89       	ldd	r25, Y+18	; 0x12
    2a78:	01 97       	sbiw	r24, 0x01	; 1
    2a7a:	f1 f7       	brne	.-4      	; 0x2a78 <LCD_sendCommand+0x29a>
    2a7c:	9a 8b       	std	Y+18, r25	; 0x12
    2a7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a80:	8b 89       	ldd	r24, Y+19	; 0x13
    2a82:	9c 89       	ldd	r25, Y+20	; 0x14
    2a84:	01 97       	sbiw	r24, 0x01	; 1
    2a86:	9c 8b       	std	Y+20, r25	; 0x14
    2a88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a8a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a8c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a8e:	00 97       	sbiw	r24, 0x00	; 0
    2a90:	69 f7       	brne	.-38     	; 0x2a6c <LCD_sendCommand+0x28e>
    2a92:	14 c0       	rjmp	.+40     	; 0x2abc <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a94:	6d 89       	ldd	r22, Y+21	; 0x15
    2a96:	7e 89       	ldd	r23, Y+22	; 0x16
    2a98:	8f 89       	ldd	r24, Y+23	; 0x17
    2a9a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	9c 8b       	std	Y+20, r25	; 0x14
    2aa6:	8b 8b       	std	Y+19, r24	; 0x13
    2aa8:	8b 89       	ldd	r24, Y+19	; 0x13
    2aaa:	9c 89       	ldd	r25, Y+20	; 0x14
    2aac:	98 8b       	std	Y+16, r25	; 0x10
    2aae:	8f 87       	std	Y+15, r24	; 0x0f
    2ab0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ab2:	98 89       	ldd	r25, Y+16	; 0x10
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	f1 f7       	brne	.-4      	; 0x2ab4 <LCD_sendCommand+0x2d6>
    2ab8:	98 8b       	std	Y+16, r25	; 0x10
    2aba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2abc:	82 e0       	ldi	r24, 0x02	; 2
    2abe:	67 e0       	ldi	r22, 0x07	; 7
    2ac0:	40 e0       	ldi	r20, 0x00	; 0
    2ac2:	0e 94 75 0f 	call	0x1eea	; 0x1eea <GPIO_writePin>
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	a0 e8       	ldi	r26, 0x80	; 128
    2acc:	bf e3       	ldi	r27, 0x3F	; 63
    2ace:	8b 87       	std	Y+11, r24	; 0x0b
    2ad0:	9c 87       	std	Y+12, r25	; 0x0c
    2ad2:	ad 87       	std	Y+13, r26	; 0x0d
    2ad4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ad8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ada:	8d 85       	ldd	r24, Y+13	; 0x0d
    2adc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	4a ef       	ldi	r20, 0xFA	; 250
    2ae4:	54 e4       	ldi	r21, 0x44	; 68
    2ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	8f 83       	std	Y+7, r24	; 0x07
    2af0:	98 87       	std	Y+8, r25	; 0x08
    2af2:	a9 87       	std	Y+9, r26	; 0x09
    2af4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2af6:	6f 81       	ldd	r22, Y+7	; 0x07
    2af8:	78 85       	ldd	r23, Y+8	; 0x08
    2afa:	89 85       	ldd	r24, Y+9	; 0x09
    2afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e8       	ldi	r20, 0x80	; 128
    2b04:	5f e3       	ldi	r21, 0x3F	; 63
    2b06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b0a:	88 23       	and	r24, r24
    2b0c:	2c f4       	brge	.+10     	; 0x2b18 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	9e 83       	std	Y+6, r25	; 0x06
    2b14:	8d 83       	std	Y+5, r24	; 0x05
    2b16:	3f c0       	rjmp	.+126    	; 0x2b96 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2b18:	6f 81       	ldd	r22, Y+7	; 0x07
    2b1a:	78 85       	ldd	r23, Y+8	; 0x08
    2b1c:	89 85       	ldd	r24, Y+9	; 0x09
    2b1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	3f ef       	ldi	r19, 0xFF	; 255
    2b24:	4f e7       	ldi	r20, 0x7F	; 127
    2b26:	57 e4       	ldi	r21, 0x47	; 71
    2b28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b2c:	18 16       	cp	r1, r24
    2b2e:	4c f5       	brge	.+82     	; 0x2b82 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b30:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b32:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	40 e2       	ldi	r20, 0x20	; 32
    2b3e:	51 e4       	ldi	r21, 0x41	; 65
    2b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	bc 01       	movw	r22, r24
    2b4a:	cd 01       	movw	r24, r26
    2b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	9e 83       	std	Y+6, r25	; 0x06
    2b56:	8d 83       	std	Y+5, r24	; 0x05
    2b58:	0f c0       	rjmp	.+30     	; 0x2b78 <LCD_sendCommand+0x39a>
    2b5a:	88 ec       	ldi	r24, 0xC8	; 200
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	9c 83       	std	Y+4, r25	; 0x04
    2b60:	8b 83       	std	Y+3, r24	; 0x03
    2b62:	8b 81       	ldd	r24, Y+3	; 0x03
    2b64:	9c 81       	ldd	r25, Y+4	; 0x04
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	f1 f7       	brne	.-4      	; 0x2b66 <LCD_sendCommand+0x388>
    2b6a:	9c 83       	std	Y+4, r25	; 0x04
    2b6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b70:	9e 81       	ldd	r25, Y+6	; 0x06
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	9e 83       	std	Y+6, r25	; 0x06
    2b76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b78:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7c:	00 97       	sbiw	r24, 0x00	; 0
    2b7e:	69 f7       	brne	.-38     	; 0x2b5a <LCD_sendCommand+0x37c>
    2b80:	14 c0       	rjmp	.+40     	; 0x2baa <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b82:	6f 81       	ldd	r22, Y+7	; 0x07
    2b84:	78 85       	ldd	r23, Y+8	; 0x08
    2b86:	89 85       	ldd	r24, Y+9	; 0x09
    2b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	9e 83       	std	Y+6, r25	; 0x06
    2b94:	8d 83       	std	Y+5, r24	; 0x05
    2b96:	8d 81       	ldd	r24, Y+5	; 0x05
    2b98:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9a:	9a 83       	std	Y+2, r25	; 0x02
    2b9c:	89 83       	std	Y+1, r24	; 0x01
    2b9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	f1 f7       	brne	.-4      	; 0x2ba2 <LCD_sendCommand+0x3c4>
    2ba6:	9a 83       	std	Y+2, r25	; 0x02
    2ba8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2baa:	e9 96       	adiw	r28, 0x39	; 57
    2bac:	0f b6       	in	r0, 0x3f	; 63
    2bae:	f8 94       	cli
    2bb0:	de bf       	out	0x3e, r29	; 62
    2bb2:	0f be       	out	0x3f, r0	; 63
    2bb4:	cd bf       	out	0x3d, r28	; 61
    2bb6:	cf 91       	pop	r28
    2bb8:	df 91       	pop	r29
    2bba:	08 95       	ret

00002bbc <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2bbc:	df 93       	push	r29
    2bbe:	cf 93       	push	r28
    2bc0:	cd b7       	in	r28, 0x3d	; 61
    2bc2:	de b7       	in	r29, 0x3e	; 62
    2bc4:	e9 97       	sbiw	r28, 0x39	; 57
    2bc6:	0f b6       	in	r0, 0x3f	; 63
    2bc8:	f8 94       	cli
    2bca:	de bf       	out	0x3e, r29	; 62
    2bcc:	0f be       	out	0x3f, r0	; 63
    2bce:	cd bf       	out	0x3d, r28	; 61
    2bd0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2bd2:	82 e0       	ldi	r24, 0x02	; 2
    2bd4:	66 e0       	ldi	r22, 0x06	; 6
    2bd6:	41 e0       	ldi	r20, 0x01	; 1
    2bd8:	0e 94 75 0f 	call	0x1eea	; 0x1eea <GPIO_writePin>
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	a0 e8       	ldi	r26, 0x80	; 128
    2be2:	bf e3       	ldi	r27, 0x3F	; 63
    2be4:	8d ab       	std	Y+53, r24	; 0x35
    2be6:	9e ab       	std	Y+54, r25	; 0x36
    2be8:	af ab       	std	Y+55, r26	; 0x37
    2bea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bec:	6d a9       	ldd	r22, Y+53	; 0x35
    2bee:	7e a9       	ldd	r23, Y+54	; 0x36
    2bf0:	8f a9       	ldd	r24, Y+55	; 0x37
    2bf2:	98 ad       	ldd	r25, Y+56	; 0x38
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	4a ef       	ldi	r20, 0xFA	; 250
    2bfa:	54 e4       	ldi	r21, 0x44	; 68
    2bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	89 ab       	std	Y+49, r24	; 0x31
    2c06:	9a ab       	std	Y+50, r25	; 0x32
    2c08:	ab ab       	std	Y+51, r26	; 0x33
    2c0a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c0c:	69 a9       	ldd	r22, Y+49	; 0x31
    2c0e:	7a a9       	ldd	r23, Y+50	; 0x32
    2c10:	8b a9       	ldd	r24, Y+51	; 0x33
    2c12:	9c a9       	ldd	r25, Y+52	; 0x34
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	40 e8       	ldi	r20, 0x80	; 128
    2c1a:	5f e3       	ldi	r21, 0x3F	; 63
    2c1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c20:	88 23       	and	r24, r24
    2c22:	2c f4       	brge	.+10     	; 0x2c2e <LCD_displayCharacter+0x72>
		__ticks = 1;
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	98 ab       	std	Y+48, r25	; 0x30
    2c2a:	8f a7       	std	Y+47, r24	; 0x2f
    2c2c:	3f c0       	rjmp	.+126    	; 0x2cac <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2c2e:	69 a9       	ldd	r22, Y+49	; 0x31
    2c30:	7a a9       	ldd	r23, Y+50	; 0x32
    2c32:	8b a9       	ldd	r24, Y+51	; 0x33
    2c34:	9c a9       	ldd	r25, Y+52	; 0x34
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	3f ef       	ldi	r19, 0xFF	; 255
    2c3a:	4f e7       	ldi	r20, 0x7F	; 127
    2c3c:	57 e4       	ldi	r21, 0x47	; 71
    2c3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c42:	18 16       	cp	r1, r24
    2c44:	4c f5       	brge	.+82     	; 0x2c98 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c46:	6d a9       	ldd	r22, Y+53	; 0x35
    2c48:	7e a9       	ldd	r23, Y+54	; 0x36
    2c4a:	8f a9       	ldd	r24, Y+55	; 0x37
    2c4c:	98 ad       	ldd	r25, Y+56	; 0x38
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	40 e2       	ldi	r20, 0x20	; 32
    2c54:	51 e4       	ldi	r21, 0x41	; 65
    2c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	bc 01       	movw	r22, r24
    2c60:	cd 01       	movw	r24, r26
    2c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	98 ab       	std	Y+48, r25	; 0x30
    2c6c:	8f a7       	std	Y+47, r24	; 0x2f
    2c6e:	0f c0       	rjmp	.+30     	; 0x2c8e <LCD_displayCharacter+0xd2>
    2c70:	88 ec       	ldi	r24, 0xC8	; 200
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	9e a7       	std	Y+46, r25	; 0x2e
    2c76:	8d a7       	std	Y+45, r24	; 0x2d
    2c78:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c7a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c7c:	01 97       	sbiw	r24, 0x01	; 1
    2c7e:	f1 f7       	brne	.-4      	; 0x2c7c <LCD_displayCharacter+0xc0>
    2c80:	9e a7       	std	Y+46, r25	; 0x2e
    2c82:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c84:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c86:	98 a9       	ldd	r25, Y+48	; 0x30
    2c88:	01 97       	sbiw	r24, 0x01	; 1
    2c8a:	98 ab       	std	Y+48, r25	; 0x30
    2c8c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c90:	98 a9       	ldd	r25, Y+48	; 0x30
    2c92:	00 97       	sbiw	r24, 0x00	; 0
    2c94:	69 f7       	brne	.-38     	; 0x2c70 <LCD_displayCharacter+0xb4>
    2c96:	14 c0       	rjmp	.+40     	; 0x2cc0 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c98:	69 a9       	ldd	r22, Y+49	; 0x31
    2c9a:	7a a9       	ldd	r23, Y+50	; 0x32
    2c9c:	8b a9       	ldd	r24, Y+51	; 0x33
    2c9e:	9c a9       	ldd	r25, Y+52	; 0x34
    2ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	98 ab       	std	Y+48, r25	; 0x30
    2caa:	8f a7       	std	Y+47, r24	; 0x2f
    2cac:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cae:	98 a9       	ldd	r25, Y+48	; 0x30
    2cb0:	9c a7       	std	Y+44, r25	; 0x2c
    2cb2:	8b a7       	std	Y+43, r24	; 0x2b
    2cb4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cb6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cb8:	01 97       	sbiw	r24, 0x01	; 1
    2cba:	f1 f7       	brne	.-4      	; 0x2cb8 <LCD_displayCharacter+0xfc>
    2cbc:	9c a7       	std	Y+44, r25	; 0x2c
    2cbe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2cc0:	82 e0       	ldi	r24, 0x02	; 2
    2cc2:	67 e0       	ldi	r22, 0x07	; 7
    2cc4:	41 e0       	ldi	r20, 0x01	; 1
    2cc6:	0e 94 75 0f 	call	0x1eea	; 0x1eea <GPIO_writePin>
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	a0 e8       	ldi	r26, 0x80	; 128
    2cd0:	bf e3       	ldi	r27, 0x3F	; 63
    2cd2:	8f a3       	std	Y+39, r24	; 0x27
    2cd4:	98 a7       	std	Y+40, r25	; 0x28
    2cd6:	a9 a7       	std	Y+41, r26	; 0x29
    2cd8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cda:	6f a1       	ldd	r22, Y+39	; 0x27
    2cdc:	78 a5       	ldd	r23, Y+40	; 0x28
    2cde:	89 a5       	ldd	r24, Y+41	; 0x29
    2ce0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	4a ef       	ldi	r20, 0xFA	; 250
    2ce8:	54 e4       	ldi	r21, 0x44	; 68
    2cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	8b a3       	std	Y+35, r24	; 0x23
    2cf4:	9c a3       	std	Y+36, r25	; 0x24
    2cf6:	ad a3       	std	Y+37, r26	; 0x25
    2cf8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cfa:	6b a1       	ldd	r22, Y+35	; 0x23
    2cfc:	7c a1       	ldd	r23, Y+36	; 0x24
    2cfe:	8d a1       	ldd	r24, Y+37	; 0x25
    2d00:	9e a1       	ldd	r25, Y+38	; 0x26
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	40 e8       	ldi	r20, 0x80	; 128
    2d08:	5f e3       	ldi	r21, 0x3F	; 63
    2d0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d0e:	88 23       	and	r24, r24
    2d10:	2c f4       	brge	.+10     	; 0x2d1c <LCD_displayCharacter+0x160>
		__ticks = 1;
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	9a a3       	std	Y+34, r25	; 0x22
    2d18:	89 a3       	std	Y+33, r24	; 0x21
    2d1a:	3f c0       	rjmp	.+126    	; 0x2d9a <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2d1c:	6b a1       	ldd	r22, Y+35	; 0x23
    2d1e:	7c a1       	ldd	r23, Y+36	; 0x24
    2d20:	8d a1       	ldd	r24, Y+37	; 0x25
    2d22:	9e a1       	ldd	r25, Y+38	; 0x26
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	3f ef       	ldi	r19, 0xFF	; 255
    2d28:	4f e7       	ldi	r20, 0x7F	; 127
    2d2a:	57 e4       	ldi	r21, 0x47	; 71
    2d2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d30:	18 16       	cp	r1, r24
    2d32:	4c f5       	brge	.+82     	; 0x2d86 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d34:	6f a1       	ldd	r22, Y+39	; 0x27
    2d36:	78 a5       	ldd	r23, Y+40	; 0x28
    2d38:	89 a5       	ldd	r24, Y+41	; 0x29
    2d3a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	40 e2       	ldi	r20, 0x20	; 32
    2d42:	51 e4       	ldi	r21, 0x41	; 65
    2d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	bc 01       	movw	r22, r24
    2d4e:	cd 01       	movw	r24, r26
    2d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	9a a3       	std	Y+34, r25	; 0x22
    2d5a:	89 a3       	std	Y+33, r24	; 0x21
    2d5c:	0f c0       	rjmp	.+30     	; 0x2d7c <LCD_displayCharacter+0x1c0>
    2d5e:	88 ec       	ldi	r24, 0xC8	; 200
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	98 a3       	std	Y+32, r25	; 0x20
    2d64:	8f 8f       	std	Y+31, r24	; 0x1f
    2d66:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d68:	98 a1       	ldd	r25, Y+32	; 0x20
    2d6a:	01 97       	sbiw	r24, 0x01	; 1
    2d6c:	f1 f7       	brne	.-4      	; 0x2d6a <LCD_displayCharacter+0x1ae>
    2d6e:	98 a3       	std	Y+32, r25	; 0x20
    2d70:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d72:	89 a1       	ldd	r24, Y+33	; 0x21
    2d74:	9a a1       	ldd	r25, Y+34	; 0x22
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	9a a3       	std	Y+34, r25	; 0x22
    2d7a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d7c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d7e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d80:	00 97       	sbiw	r24, 0x00	; 0
    2d82:	69 f7       	brne	.-38     	; 0x2d5e <LCD_displayCharacter+0x1a2>
    2d84:	14 c0       	rjmp	.+40     	; 0x2dae <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d86:	6b a1       	ldd	r22, Y+35	; 0x23
    2d88:	7c a1       	ldd	r23, Y+36	; 0x24
    2d8a:	8d a1       	ldd	r24, Y+37	; 0x25
    2d8c:	9e a1       	ldd	r25, Y+38	; 0x26
    2d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	9a a3       	std	Y+34, r25	; 0x22
    2d98:	89 a3       	std	Y+33, r24	; 0x21
    2d9a:	89 a1       	ldd	r24, Y+33	; 0x21
    2d9c:	9a a1       	ldd	r25, Y+34	; 0x22
    2d9e:	9e 8f       	std	Y+30, r25	; 0x1e
    2da0:	8d 8f       	std	Y+29, r24	; 0x1d
    2da2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2da4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	f1 f7       	brne	.-4      	; 0x2da6 <LCD_displayCharacter+0x1ea>
    2daa:	9e 8f       	std	Y+30, r25	; 0x1e
    2dac:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2dae:	80 e0       	ldi	r24, 0x00	; 0
    2db0:	69 ad       	ldd	r22, Y+57	; 0x39
    2db2:	0e 94 3f 11 	call	0x227e	; 0x227e <GPIO_writePort>
    2db6:	80 e0       	ldi	r24, 0x00	; 0
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	a0 e8       	ldi	r26, 0x80	; 128
    2dbc:	bf e3       	ldi	r27, 0x3F	; 63
    2dbe:	89 8f       	std	Y+25, r24	; 0x19
    2dc0:	9a 8f       	std	Y+26, r25	; 0x1a
    2dc2:	ab 8f       	std	Y+27, r26	; 0x1b
    2dc4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc6:	69 8d       	ldd	r22, Y+25	; 0x19
    2dc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	4a ef       	ldi	r20, 0xFA	; 250
    2dd4:	54 e4       	ldi	r21, 0x44	; 68
    2dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	cb 01       	movw	r24, r22
    2dde:	8d 8b       	std	Y+21, r24	; 0x15
    2de0:	9e 8b       	std	Y+22, r25	; 0x16
    2de2:	af 8b       	std	Y+23, r26	; 0x17
    2de4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2de6:	6d 89       	ldd	r22, Y+21	; 0x15
    2de8:	7e 89       	ldd	r23, Y+22	; 0x16
    2dea:	8f 89       	ldd	r24, Y+23	; 0x17
    2dec:	98 8d       	ldd	r25, Y+24	; 0x18
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	40 e8       	ldi	r20, 0x80	; 128
    2df4:	5f e3       	ldi	r21, 0x3F	; 63
    2df6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dfa:	88 23       	and	r24, r24
    2dfc:	2c f4       	brge	.+10     	; 0x2e08 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	9c 8b       	std	Y+20, r25	; 0x14
    2e04:	8b 8b       	std	Y+19, r24	; 0x13
    2e06:	3f c0       	rjmp	.+126    	; 0x2e86 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2e08:	6d 89       	ldd	r22, Y+21	; 0x15
    2e0a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e0e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	3f ef       	ldi	r19, 0xFF	; 255
    2e14:	4f e7       	ldi	r20, 0x7F	; 127
    2e16:	57 e4       	ldi	r21, 0x47	; 71
    2e18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e1c:	18 16       	cp	r1, r24
    2e1e:	4c f5       	brge	.+82     	; 0x2e72 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e20:	69 8d       	ldd	r22, Y+25	; 0x19
    2e22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	40 e2       	ldi	r20, 0x20	; 32
    2e2e:	51 e4       	ldi	r21, 0x41	; 65
    2e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	bc 01       	movw	r22, r24
    2e3a:	cd 01       	movw	r24, r26
    2e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	9c 8b       	std	Y+20, r25	; 0x14
    2e46:	8b 8b       	std	Y+19, r24	; 0x13
    2e48:	0f c0       	rjmp	.+30     	; 0x2e68 <LCD_displayCharacter+0x2ac>
    2e4a:	88 ec       	ldi	r24, 0xC8	; 200
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	9a 8b       	std	Y+18, r25	; 0x12
    2e50:	89 8b       	std	Y+17, r24	; 0x11
    2e52:	89 89       	ldd	r24, Y+17	; 0x11
    2e54:	9a 89       	ldd	r25, Y+18	; 0x12
    2e56:	01 97       	sbiw	r24, 0x01	; 1
    2e58:	f1 f7       	brne	.-4      	; 0x2e56 <LCD_displayCharacter+0x29a>
    2e5a:	9a 8b       	std	Y+18, r25	; 0x12
    2e5c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e60:	9c 89       	ldd	r25, Y+20	; 0x14
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	9c 8b       	std	Y+20, r25	; 0x14
    2e66:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e68:	8b 89       	ldd	r24, Y+19	; 0x13
    2e6a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e6c:	00 97       	sbiw	r24, 0x00	; 0
    2e6e:	69 f7       	brne	.-38     	; 0x2e4a <LCD_displayCharacter+0x28e>
    2e70:	14 c0       	rjmp	.+40     	; 0x2e9a <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e72:	6d 89       	ldd	r22, Y+21	; 0x15
    2e74:	7e 89       	ldd	r23, Y+22	; 0x16
    2e76:	8f 89       	ldd	r24, Y+23	; 0x17
    2e78:	98 8d       	ldd	r25, Y+24	; 0x18
    2e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	9c 8b       	std	Y+20, r25	; 0x14
    2e84:	8b 8b       	std	Y+19, r24	; 0x13
    2e86:	8b 89       	ldd	r24, Y+19	; 0x13
    2e88:	9c 89       	ldd	r25, Y+20	; 0x14
    2e8a:	98 8b       	std	Y+16, r25	; 0x10
    2e8c:	8f 87       	std	Y+15, r24	; 0x0f
    2e8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e90:	98 89       	ldd	r25, Y+16	; 0x10
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	f1 f7       	brne	.-4      	; 0x2e92 <LCD_displayCharacter+0x2d6>
    2e96:	98 8b       	std	Y+16, r25	; 0x10
    2e98:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2e9a:	82 e0       	ldi	r24, 0x02	; 2
    2e9c:	67 e0       	ldi	r22, 0x07	; 7
    2e9e:	40 e0       	ldi	r20, 0x00	; 0
    2ea0:	0e 94 75 0f 	call	0x1eea	; 0x1eea <GPIO_writePin>
    2ea4:	80 e0       	ldi	r24, 0x00	; 0
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	a0 e8       	ldi	r26, 0x80	; 128
    2eaa:	bf e3       	ldi	r27, 0x3F	; 63
    2eac:	8b 87       	std	Y+11, r24	; 0x0b
    2eae:	9c 87       	std	Y+12, r25	; 0x0c
    2eb0:	ad 87       	std	Y+13, r26	; 0x0d
    2eb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	4a ef       	ldi	r20, 0xFA	; 250
    2ec2:	54 e4       	ldi	r21, 0x44	; 68
    2ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec8:	dc 01       	movw	r26, r24
    2eca:	cb 01       	movw	r24, r22
    2ecc:	8f 83       	std	Y+7, r24	; 0x07
    2ece:	98 87       	std	Y+8, r25	; 0x08
    2ed0:	a9 87       	std	Y+9, r26	; 0x09
    2ed2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ed4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed6:	78 85       	ldd	r23, Y+8	; 0x08
    2ed8:	89 85       	ldd	r24, Y+9	; 0x09
    2eda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	40 e8       	ldi	r20, 0x80	; 128
    2ee2:	5f e3       	ldi	r21, 0x3F	; 63
    2ee4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ee8:	88 23       	and	r24, r24
    2eea:	2c f4       	brge	.+10     	; 0x2ef6 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2eec:	81 e0       	ldi	r24, 0x01	; 1
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	9e 83       	std	Y+6, r25	; 0x06
    2ef2:	8d 83       	std	Y+5, r24	; 0x05
    2ef4:	3f c0       	rjmp	.+126    	; 0x2f74 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2ef6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef8:	78 85       	ldd	r23, Y+8	; 0x08
    2efa:	89 85       	ldd	r24, Y+9	; 0x09
    2efc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2efe:	20 e0       	ldi	r18, 0x00	; 0
    2f00:	3f ef       	ldi	r19, 0xFF	; 255
    2f02:	4f e7       	ldi	r20, 0x7F	; 127
    2f04:	57 e4       	ldi	r21, 0x47	; 71
    2f06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f0a:	18 16       	cp	r1, r24
    2f0c:	4c f5       	brge	.+82     	; 0x2f60 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f10:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f12:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f14:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f16:	20 e0       	ldi	r18, 0x00	; 0
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	40 e2       	ldi	r20, 0x20	; 32
    2f1c:	51 e4       	ldi	r21, 0x41	; 65
    2f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	bc 01       	movw	r22, r24
    2f28:	cd 01       	movw	r24, r26
    2f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	9e 83       	std	Y+6, r25	; 0x06
    2f34:	8d 83       	std	Y+5, r24	; 0x05
    2f36:	0f c0       	rjmp	.+30     	; 0x2f56 <LCD_displayCharacter+0x39a>
    2f38:	88 ec       	ldi	r24, 0xC8	; 200
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	9c 83       	std	Y+4, r25	; 0x04
    2f3e:	8b 83       	std	Y+3, r24	; 0x03
    2f40:	8b 81       	ldd	r24, Y+3	; 0x03
    2f42:	9c 81       	ldd	r25, Y+4	; 0x04
    2f44:	01 97       	sbiw	r24, 0x01	; 1
    2f46:	f1 f7       	brne	.-4      	; 0x2f44 <LCD_displayCharacter+0x388>
    2f48:	9c 83       	std	Y+4, r25	; 0x04
    2f4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f50:	01 97       	sbiw	r24, 0x01	; 1
    2f52:	9e 83       	std	Y+6, r25	; 0x06
    2f54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f56:	8d 81       	ldd	r24, Y+5	; 0x05
    2f58:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5a:	00 97       	sbiw	r24, 0x00	; 0
    2f5c:	69 f7       	brne	.-38     	; 0x2f38 <LCD_displayCharacter+0x37c>
    2f5e:	14 c0       	rjmp	.+40     	; 0x2f88 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f60:	6f 81       	ldd	r22, Y+7	; 0x07
    2f62:	78 85       	ldd	r23, Y+8	; 0x08
    2f64:	89 85       	ldd	r24, Y+9	; 0x09
    2f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	9e 83       	std	Y+6, r25	; 0x06
    2f72:	8d 83       	std	Y+5, r24	; 0x05
    2f74:	8d 81       	ldd	r24, Y+5	; 0x05
    2f76:	9e 81       	ldd	r25, Y+6	; 0x06
    2f78:	9a 83       	std	Y+2, r25	; 0x02
    2f7a:	89 83       	std	Y+1, r24	; 0x01
    2f7c:	89 81       	ldd	r24, Y+1	; 0x01
    2f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f80:	01 97       	sbiw	r24, 0x01	; 1
    2f82:	f1 f7       	brne	.-4      	; 0x2f80 <LCD_displayCharacter+0x3c4>
    2f84:	9a 83       	std	Y+2, r25	; 0x02
    2f86:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2f88:	e9 96       	adiw	r28, 0x39	; 57
    2f8a:	0f b6       	in	r0, 0x3f	; 63
    2f8c:	f8 94       	cli
    2f8e:	de bf       	out	0x3e, r29	; 62
    2f90:	0f be       	out	0x3f, r0	; 63
    2f92:	cd bf       	out	0x3d, r28	; 61
    2f94:	cf 91       	pop	r28
    2f96:	df 91       	pop	r29
    2f98:	08 95       	ret

00002f9a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2f9a:	df 93       	push	r29
    2f9c:	cf 93       	push	r28
    2f9e:	00 d0       	rcall	.+0      	; 0x2fa0 <LCD_displayString+0x6>
    2fa0:	0f 92       	push	r0
    2fa2:	cd b7       	in	r28, 0x3d	; 61
    2fa4:	de b7       	in	r29, 0x3e	; 62
    2fa6:	9b 83       	std	Y+3, r25	; 0x03
    2fa8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2faa:	19 82       	std	Y+1, r1	; 0x01
    2fac:	0e c0       	rjmp	.+28     	; 0x2fca <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2fae:	89 81       	ldd	r24, Y+1	; 0x01
    2fb0:	28 2f       	mov	r18, r24
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fb8:	fc 01       	movw	r30, r24
    2fba:	e2 0f       	add	r30, r18
    2fbc:	f3 1f       	adc	r31, r19
    2fbe:	80 81       	ld	r24, Z
    2fc0:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_displayCharacter>
		i++;
    2fc4:	89 81       	ldd	r24, Y+1	; 0x01
    2fc6:	8f 5f       	subi	r24, 0xFF	; 255
    2fc8:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2fca:	89 81       	ldd	r24, Y+1	; 0x01
    2fcc:	28 2f       	mov	r18, r24
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd4:	fc 01       	movw	r30, r24
    2fd6:	e2 0f       	add	r30, r18
    2fd8:	f3 1f       	adc	r31, r19
    2fda:	80 81       	ld	r24, Z
    2fdc:	88 23       	and	r24, r24
    2fde:	39 f7       	brne	.-50     	; 0x2fae <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2fe0:	0f 90       	pop	r0
    2fe2:	0f 90       	pop	r0
    2fe4:	0f 90       	pop	r0
    2fe6:	cf 91       	pop	r28
    2fe8:	df 91       	pop	r29
    2fea:	08 95       	ret

00002fec <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2fec:	df 93       	push	r29
    2fee:	cf 93       	push	r28
    2ff0:	00 d0       	rcall	.+0      	; 0x2ff2 <LCD_moveCursor+0x6>
    2ff2:	00 d0       	rcall	.+0      	; 0x2ff4 <LCD_moveCursor+0x8>
    2ff4:	0f 92       	push	r0
    2ff6:	cd b7       	in	r28, 0x3d	; 61
    2ff8:	de b7       	in	r29, 0x3e	; 62
    2ffa:	8a 83       	std	Y+2, r24	; 0x02
    2ffc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    3000:	28 2f       	mov	r18, r24
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	3d 83       	std	Y+5, r19	; 0x05
    3006:	2c 83       	std	Y+4, r18	; 0x04
    3008:	8c 81       	ldd	r24, Y+4	; 0x04
    300a:	9d 81       	ldd	r25, Y+5	; 0x05
    300c:	81 30       	cpi	r24, 0x01	; 1
    300e:	91 05       	cpc	r25, r1
    3010:	c1 f0       	breq	.+48     	; 0x3042 <LCD_moveCursor+0x56>
    3012:	2c 81       	ldd	r18, Y+4	; 0x04
    3014:	3d 81       	ldd	r19, Y+5	; 0x05
    3016:	22 30       	cpi	r18, 0x02	; 2
    3018:	31 05       	cpc	r19, r1
    301a:	2c f4       	brge	.+10     	; 0x3026 <LCD_moveCursor+0x3a>
    301c:	8c 81       	ldd	r24, Y+4	; 0x04
    301e:	9d 81       	ldd	r25, Y+5	; 0x05
    3020:	00 97       	sbiw	r24, 0x00	; 0
    3022:	61 f0       	breq	.+24     	; 0x303c <LCD_moveCursor+0x50>
    3024:	19 c0       	rjmp	.+50     	; 0x3058 <LCD_moveCursor+0x6c>
    3026:	2c 81       	ldd	r18, Y+4	; 0x04
    3028:	3d 81       	ldd	r19, Y+5	; 0x05
    302a:	22 30       	cpi	r18, 0x02	; 2
    302c:	31 05       	cpc	r19, r1
    302e:	69 f0       	breq	.+26     	; 0x304a <LCD_moveCursor+0x5e>
    3030:	8c 81       	ldd	r24, Y+4	; 0x04
    3032:	9d 81       	ldd	r25, Y+5	; 0x05
    3034:	83 30       	cpi	r24, 0x03	; 3
    3036:	91 05       	cpc	r25, r1
    3038:	61 f0       	breq	.+24     	; 0x3052 <LCD_moveCursor+0x66>
    303a:	0e c0       	rjmp	.+28     	; 0x3058 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    303c:	8b 81       	ldd	r24, Y+3	; 0x03
    303e:	89 83       	std	Y+1, r24	; 0x01
    3040:	0b c0       	rjmp	.+22     	; 0x3058 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3042:	8b 81       	ldd	r24, Y+3	; 0x03
    3044:	80 5c       	subi	r24, 0xC0	; 192
    3046:	89 83       	std	Y+1, r24	; 0x01
    3048:	07 c0       	rjmp	.+14     	; 0x3058 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    304a:	8b 81       	ldd	r24, Y+3	; 0x03
    304c:	80 5f       	subi	r24, 0xF0	; 240
    304e:	89 83       	std	Y+1, r24	; 0x01
    3050:	03 c0       	rjmp	.+6      	; 0x3058 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3052:	8b 81       	ldd	r24, Y+3	; 0x03
    3054:	80 5b       	subi	r24, 0xB0	; 176
    3056:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3058:	89 81       	ldd	r24, Y+1	; 0x01
    305a:	80 68       	ori	r24, 0x80	; 128
    305c:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_sendCommand>
}
    3060:	0f 90       	pop	r0
    3062:	0f 90       	pop	r0
    3064:	0f 90       	pop	r0
    3066:	0f 90       	pop	r0
    3068:	0f 90       	pop	r0
    306a:	cf 91       	pop	r28
    306c:	df 91       	pop	r29
    306e:	08 95       	ret

00003070 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3070:	df 93       	push	r29
    3072:	cf 93       	push	r28
    3074:	00 d0       	rcall	.+0      	; 0x3076 <LCD_displayStringRowColumn+0x6>
    3076:	00 d0       	rcall	.+0      	; 0x3078 <LCD_displayStringRowColumn+0x8>
    3078:	cd b7       	in	r28, 0x3d	; 61
    307a:	de b7       	in	r29, 0x3e	; 62
    307c:	89 83       	std	Y+1, r24	; 0x01
    307e:	6a 83       	std	Y+2, r22	; 0x02
    3080:	5c 83       	std	Y+4, r21	; 0x04
    3082:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3084:	89 81       	ldd	r24, Y+1	; 0x01
    3086:	6a 81       	ldd	r22, Y+2	; 0x02
    3088:	0e 94 f6 17 	call	0x2fec	; 0x2fec <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    308c:	8b 81       	ldd	r24, Y+3	; 0x03
    308e:	9c 81       	ldd	r25, Y+4	; 0x04
    3090:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_displayString>
}
    3094:	0f 90       	pop	r0
    3096:	0f 90       	pop	r0
    3098:	0f 90       	pop	r0
    309a:	0f 90       	pop	r0
    309c:	cf 91       	pop	r28
    309e:	df 91       	pop	r29
    30a0:	08 95       	ret

000030a2 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    30a2:	df 93       	push	r29
    30a4:	cf 93       	push	r28
    30a6:	cd b7       	in	r28, 0x3d	; 61
    30a8:	de b7       	in	r29, 0x3e	; 62
    30aa:	62 97       	sbiw	r28, 0x12	; 18
    30ac:	0f b6       	in	r0, 0x3f	; 63
    30ae:	f8 94       	cli
    30b0:	de bf       	out	0x3e, r29	; 62
    30b2:	0f be       	out	0x3f, r0	; 63
    30b4:	cd bf       	out	0x3d, r28	; 61
    30b6:	9a 8b       	std	Y+18, r25	; 0x12
    30b8:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    30ba:	89 89       	ldd	r24, Y+17	; 0x11
    30bc:	9a 89       	ldd	r25, Y+18	; 0x12
    30be:	9e 01       	movw	r18, r28
    30c0:	2f 5f       	subi	r18, 0xFF	; 255
    30c2:	3f 4f       	sbci	r19, 0xFF	; 255
    30c4:	b9 01       	movw	r22, r18
    30c6:	4a e0       	ldi	r20, 0x0A	; 10
    30c8:	50 e0       	ldi	r21, 0x00	; 0
    30ca:	0e 94 d7 18 	call	0x31ae	; 0x31ae <itoa>
   LCD_displayString(buff); /* Display the string */
    30ce:	ce 01       	movw	r24, r28
    30d0:	01 96       	adiw	r24, 0x01	; 1
    30d2:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_displayString>
}
    30d6:	62 96       	adiw	r28, 0x12	; 18
    30d8:	0f b6       	in	r0, 0x3f	; 63
    30da:	f8 94       	cli
    30dc:	de bf       	out	0x3e, r29	; 62
    30de:	0f be       	out	0x3f, r0	; 63
    30e0:	cd bf       	out	0x3d, r28	; 61
    30e2:	cf 91       	pop	r28
    30e4:	df 91       	pop	r29
    30e6:	08 95       	ret

000030e8 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    30e8:	df 93       	push	r29
    30ea:	cf 93       	push	r28
    30ec:	cd b7       	in	r28, 0x3d	; 61
    30ee:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_sendCommand>
}
    30f6:	cf 91       	pop	r28
    30f8:	df 91       	pop	r29
    30fa:	08 95       	ret

000030fc <__udivmodsi4>:
    30fc:	a1 e2       	ldi	r26, 0x21	; 33
    30fe:	1a 2e       	mov	r1, r26
    3100:	aa 1b       	sub	r26, r26
    3102:	bb 1b       	sub	r27, r27
    3104:	fd 01       	movw	r30, r26
    3106:	0d c0       	rjmp	.+26     	; 0x3122 <__udivmodsi4_ep>

00003108 <__udivmodsi4_loop>:
    3108:	aa 1f       	adc	r26, r26
    310a:	bb 1f       	adc	r27, r27
    310c:	ee 1f       	adc	r30, r30
    310e:	ff 1f       	adc	r31, r31
    3110:	a2 17       	cp	r26, r18
    3112:	b3 07       	cpc	r27, r19
    3114:	e4 07       	cpc	r30, r20
    3116:	f5 07       	cpc	r31, r21
    3118:	20 f0       	brcs	.+8      	; 0x3122 <__udivmodsi4_ep>
    311a:	a2 1b       	sub	r26, r18
    311c:	b3 0b       	sbc	r27, r19
    311e:	e4 0b       	sbc	r30, r20
    3120:	f5 0b       	sbc	r31, r21

00003122 <__udivmodsi4_ep>:
    3122:	66 1f       	adc	r22, r22
    3124:	77 1f       	adc	r23, r23
    3126:	88 1f       	adc	r24, r24
    3128:	99 1f       	adc	r25, r25
    312a:	1a 94       	dec	r1
    312c:	69 f7       	brne	.-38     	; 0x3108 <__udivmodsi4_loop>
    312e:	60 95       	com	r22
    3130:	70 95       	com	r23
    3132:	80 95       	com	r24
    3134:	90 95       	com	r25
    3136:	9b 01       	movw	r18, r22
    3138:	ac 01       	movw	r20, r24
    313a:	bd 01       	movw	r22, r26
    313c:	cf 01       	movw	r24, r30
    313e:	08 95       	ret

00003140 <__prologue_saves__>:
    3140:	2f 92       	push	r2
    3142:	3f 92       	push	r3
    3144:	4f 92       	push	r4
    3146:	5f 92       	push	r5
    3148:	6f 92       	push	r6
    314a:	7f 92       	push	r7
    314c:	8f 92       	push	r8
    314e:	9f 92       	push	r9
    3150:	af 92       	push	r10
    3152:	bf 92       	push	r11
    3154:	cf 92       	push	r12
    3156:	df 92       	push	r13
    3158:	ef 92       	push	r14
    315a:	ff 92       	push	r15
    315c:	0f 93       	push	r16
    315e:	1f 93       	push	r17
    3160:	cf 93       	push	r28
    3162:	df 93       	push	r29
    3164:	cd b7       	in	r28, 0x3d	; 61
    3166:	de b7       	in	r29, 0x3e	; 62
    3168:	ca 1b       	sub	r28, r26
    316a:	db 0b       	sbc	r29, r27
    316c:	0f b6       	in	r0, 0x3f	; 63
    316e:	f8 94       	cli
    3170:	de bf       	out	0x3e, r29	; 62
    3172:	0f be       	out	0x3f, r0	; 63
    3174:	cd bf       	out	0x3d, r28	; 61
    3176:	09 94       	ijmp

00003178 <__epilogue_restores__>:
    3178:	2a 88       	ldd	r2, Y+18	; 0x12
    317a:	39 88       	ldd	r3, Y+17	; 0x11
    317c:	48 88       	ldd	r4, Y+16	; 0x10
    317e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3180:	6e 84       	ldd	r6, Y+14	; 0x0e
    3182:	7d 84       	ldd	r7, Y+13	; 0x0d
    3184:	8c 84       	ldd	r8, Y+12	; 0x0c
    3186:	9b 84       	ldd	r9, Y+11	; 0x0b
    3188:	aa 84       	ldd	r10, Y+10	; 0x0a
    318a:	b9 84       	ldd	r11, Y+9	; 0x09
    318c:	c8 84       	ldd	r12, Y+8	; 0x08
    318e:	df 80       	ldd	r13, Y+7	; 0x07
    3190:	ee 80       	ldd	r14, Y+6	; 0x06
    3192:	fd 80       	ldd	r15, Y+5	; 0x05
    3194:	0c 81       	ldd	r16, Y+4	; 0x04
    3196:	1b 81       	ldd	r17, Y+3	; 0x03
    3198:	aa 81       	ldd	r26, Y+2	; 0x02
    319a:	b9 81       	ldd	r27, Y+1	; 0x01
    319c:	ce 0f       	add	r28, r30
    319e:	d1 1d       	adc	r29, r1
    31a0:	0f b6       	in	r0, 0x3f	; 63
    31a2:	f8 94       	cli
    31a4:	de bf       	out	0x3e, r29	; 62
    31a6:	0f be       	out	0x3f, r0	; 63
    31a8:	cd bf       	out	0x3d, r28	; 61
    31aa:	ed 01       	movw	r28, r26
    31ac:	08 95       	ret

000031ae <itoa>:
    31ae:	fb 01       	movw	r30, r22
    31b0:	9f 01       	movw	r18, r30
    31b2:	e8 94       	clt
    31b4:	42 30       	cpi	r20, 0x02	; 2
    31b6:	c4 f0       	brlt	.+48     	; 0x31e8 <itoa+0x3a>
    31b8:	45 32       	cpi	r20, 0x25	; 37
    31ba:	b4 f4       	brge	.+44     	; 0x31e8 <itoa+0x3a>
    31bc:	4a 30       	cpi	r20, 0x0A	; 10
    31be:	29 f4       	brne	.+10     	; 0x31ca <itoa+0x1c>
    31c0:	97 fb       	bst	r25, 7
    31c2:	1e f4       	brtc	.+6      	; 0x31ca <itoa+0x1c>
    31c4:	90 95       	com	r25
    31c6:	81 95       	neg	r24
    31c8:	9f 4f       	sbci	r25, 0xFF	; 255
    31ca:	64 2f       	mov	r22, r20
    31cc:	77 27       	eor	r23, r23
    31ce:	0e 94 08 19 	call	0x3210	; 0x3210 <__udivmodhi4>
    31d2:	80 5d       	subi	r24, 0xD0	; 208
    31d4:	8a 33       	cpi	r24, 0x3A	; 58
    31d6:	0c f0       	brlt	.+2      	; 0x31da <itoa+0x2c>
    31d8:	89 5d       	subi	r24, 0xD9	; 217
    31da:	81 93       	st	Z+, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	00 97       	sbiw	r24, 0x00	; 0
    31e0:	a1 f7       	brne	.-24     	; 0x31ca <itoa+0x1c>
    31e2:	16 f4       	brtc	.+4      	; 0x31e8 <itoa+0x3a>
    31e4:	5d e2       	ldi	r21, 0x2D	; 45
    31e6:	51 93       	st	Z+, r21
    31e8:	10 82       	st	Z, r1
    31ea:	c9 01       	movw	r24, r18
    31ec:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <strrev>

000031f0 <strrev>:
    31f0:	dc 01       	movw	r26, r24
    31f2:	fc 01       	movw	r30, r24
    31f4:	67 2f       	mov	r22, r23
    31f6:	71 91       	ld	r23, Z+
    31f8:	77 23       	and	r23, r23
    31fa:	e1 f7       	brne	.-8      	; 0x31f4 <strrev+0x4>
    31fc:	32 97       	sbiw	r30, 0x02	; 2
    31fe:	04 c0       	rjmp	.+8      	; 0x3208 <strrev+0x18>
    3200:	7c 91       	ld	r23, X
    3202:	6d 93       	st	X+, r22
    3204:	70 83       	st	Z, r23
    3206:	62 91       	ld	r22, -Z
    3208:	ae 17       	cp	r26, r30
    320a:	bf 07       	cpc	r27, r31
    320c:	c8 f3       	brcs	.-14     	; 0x3200 <strrev+0x10>
    320e:	08 95       	ret

00003210 <__udivmodhi4>:
    3210:	aa 1b       	sub	r26, r26
    3212:	bb 1b       	sub	r27, r27
    3214:	51 e1       	ldi	r21, 0x11	; 17
    3216:	07 c0       	rjmp	.+14     	; 0x3226 <__udivmodhi4_ep>

00003218 <__udivmodhi4_loop>:
    3218:	aa 1f       	adc	r26, r26
    321a:	bb 1f       	adc	r27, r27
    321c:	a6 17       	cp	r26, r22
    321e:	b7 07       	cpc	r27, r23
    3220:	10 f0       	brcs	.+4      	; 0x3226 <__udivmodhi4_ep>
    3222:	a6 1b       	sub	r26, r22
    3224:	b7 0b       	sbc	r27, r23

00003226 <__udivmodhi4_ep>:
    3226:	88 1f       	adc	r24, r24
    3228:	99 1f       	adc	r25, r25
    322a:	5a 95       	dec	r21
    322c:	a9 f7       	brne	.-22     	; 0x3218 <__udivmodhi4_loop>
    322e:	80 95       	com	r24
    3230:	90 95       	com	r25
    3232:	bc 01       	movw	r22, r24
    3234:	cd 01       	movw	r24, r26
    3236:	08 95       	ret

00003238 <_exit>:
    3238:	f8 94       	cli

0000323a <__stop_program>:
    323a:	ff cf       	rjmp	.-2      	; 0x323a <__stop_program>
